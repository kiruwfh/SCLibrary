--[[ Credits
    Matas#3535 @matas - Created UI
    bored#9316 @wally hub user - Helped make library
    Updated for Solara v3 compatibility
]]

-- // Mock Roblox environment for testing outside of Roblox
local isTesting = not pcall(function() return game and game:GetService("Players") end) -- Auto-detect if running outside Roblox

print("Test mode: " .. (isTesting and "Enabled" or "Disabled"))

-- Create mock Roblox API
local game = game or {}
if isTesting then
    -- Создаем моки Roblox сервисов
    local services = {
        Workspace = {
            CurrentCamera = { 
                ViewportSize = Vector2.new(1920, 1080)
            }
        },
        UserInputService = {
            InputBegan = {
                Connect = function() 
                    return {Disconnect = function() end}
                end
            },
            InputChanged = {
                Connect = function() 
                    return {Disconnect = function() end}
                end
            },
            InputEnded = {
                Connect = function() 
                    return {Disconnect = function() end}
                end
            },
            GetMouseLocation = function()
                return Vector2.new(0, 0)
            end
        },
        RunService = {
            RenderStepped = {
                Connect = function(_, func) 
                    func(0.03) -- Вызвать один раз с аргументом дельта
                    return {Disconnect = function() end}
                end
            }
        },
        HttpService = {
            JSONEncode = function(_, data)
                return tostring(data)
            end,
            JSONDecode = function(_, str)
                return {data = str}
            end
        },
        Players = {
            LocalPlayer = {
                Name = "TestPlayer"
            }
        },
        Stats = {}
    }
    
    -- Мок для game:GetService
    function game:GetService(serviceName)
        return services[serviceName]
    end
    
    -- Мок для game:HttpGet
    function game:HttpGet(url)
        return "mock_http_response"
    end
    
    -- Создаем моки для файловой системы, если они не существуют
    if not isfolder then
        function isfolder(path)
            return true -- Всегда возвращаем true для тестов
        end
    end
    
    if not makefolder then
        function makefolder(path)
            -- Ничего не делаем, это заглушка
        end
    end
    
    if not isfile then
        function isfile(path)
            return false -- Всегда возвращаем false для тестов
        end
    end
    
    if not readfile then
        function readfile(path)
            return ""
        end
    end
    
    if not writefile then
        function writefile(path, content)
            -- Ничего не делаем, это заглушка
        end
    end
    
    if not identifyexecutor then
        function identifyexecutor()
            return "Solara v3"
        end
    end
    -- Mock essential Roblox types
    if not Vector2 then
        Vector2 = {}
        function Vector2.new(x, y)
            return {x = x or 0, y = y or 0}
        end
    end
    
    if not Vector3 then
        Vector3 = {}
        function Vector3.new(x, y, z)
            return {x = x or 0, y = y or 0, z = z or 0}
        end
    end
    
    if not Color3 then
        Color3 = {}
        function Color3.fromRGB(r, g, b)
            return {R = r/255, G = g/255, B = b/255, r = r, g = g, b = b}
        end
        function Color3.new(r, g, b)
            return {R = r, G = g, B = b, r = r*255, g = g*255, b = b*255}
        end
    end
    
    if not UDim2 then
        UDim2 = {}
        function UDim2.new(x1, x2, y1, y2)
            return {X = {Scale = x1, Offset = x2}, Y = {Scale = y1, Offset = y2}}
        end
    end
    
    if not Enum then
        Enum = {
            KeyCode = {
                Unknown = 0,
                Return = 13,
                LeftShift = 304,
                RightShift = 303,
                LeftControl = 306,
                RightControl = 305,
                LeftAlt = 308,
                RightAlt = 307,
                Escape = 27,
                Z = 90
            },
            UserInputType = {
                MouseButton1 = 0,
                MouseButton2 = 1,
                MouseButton3 = 2,
                MouseMovement = 3,
                MouseWheel = 4,
                Touch = 5,
                Keyboard = 6,
                Focus = 7,
                Accelerometer = 8
            },
            ZIndexBehavior = {
                Global = 0,
                Sibling = 1
            },
            Font = {
                Legacy = 0,
                Arial = 1,
                SourceSans = 2,
                SourceSansBold = 3
            }
        }
    end
    
    if not task then
        task = {}
        function task.spawn(f, ...)
            local args = {...}
            local success, result = pcall(function() return f(table.unpack(args)) end)
            if not success then
                print("Error in task.spawn: " .. tostring(result))
            end
            return success and result or nil
        end
        function task.wait(duration)
            return duration or 0.03
        end
    end
    
    if not Instance then
        Instance = {}
        function Instance.new(instanceType)
            local instance = {
                Name = "Mock" .. instanceType,
                Parent = nil,
                ClassName = instanceType,
                Children = {},
                Visible = true,
                Transparency = 0,
                Position = Vector2.new(0, 0),
                Size = Vector2.new(100, 100),
                ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
                -- Mock events
                InputBegan = {
                    Connect = function(self, callback)
                        return {
                            Connected = true,
                            Disconnect = function() end
                        }
                    end
                },
                MouseEnter = {
                    Connect = function(self, callback)
                        return {
                            Connected = true,
                            Disconnect = function() end
                        }
                    end
                },
                MouseLeave = {
                    Connect = function(self, callback)
                        return {
                            Connected = true,
                            Disconnect = function() end
                        }
                    end
                },
                ChildRemoved = {
                    Connect = function(self, callback)
                        return {
                            Connected = true,
                            Disconnect = function() end
                        }
                    end
                },
                -- Mock methods
                GetPropertyChangedSignal = function(self, property)
                    return {
                        Connect = function(callback)
                            return {
                                Connected = true,
                                Disconnect = function() end
                            }
                        end
                    }
                end,
                IsA = function(self, className)
                    return self.ClassName == className
                end,
                Clone = function(self)
                    local clone = Instance.new(self.ClassName)
                    for k, v in pairs(self) do
                        if type(v) ~= "function" and k ~= "Children" then
                            clone[k] = v
                        end
                    end
                    return clone
                end,
                Destroy = function(self)
                    if self.Parent then
                        for i, child in ipairs(self.Parent.Children) do
                            if child == self then
                                table.remove(self.Parent.Children, i)
                                break
                            end
                        end
                    end
                    self.Parent = nil
                end
            }
            return instance
        end
    end
    
    -- Create mock service functions
    local function createMockService(name)
        local service = {}
        
        if name == "UserInputService" then
            service.InputBegan = {
                Connect = function(self, callback)
                    return {
                        Connected = true,
                        Disconnect = function() end
                    }
                end
            }
            
            service.InputChanged = {
                Connect = function(self, callback)
                    return {
                        Connected = true,
                        Disconnect = function() end
                    }
                end
            }
            
            service.InputEnded = {
                Connect = function(self, callback)
                    return {
                        Connected = true,
                        Disconnect = function() end
                    }
                end
            }
            
            function service:GetMouseLocation()
                return Vector2.new(0, 0)
            end
        elseif name == "RunService" then
            service.RenderStepped = {
                Connect = function(self, callback)
                    return {
                        Connected = true,
                        Disconnect = function() end
                    }
                end,
                Wait = function()
                    return 0.03  -- Simulate 30 FPS
                end
            }
            
            service.Heartbeat = {
                Connect = function(self, callback)
                    return {
                        Connected = true,
                        Disconnect = function() end
                    }
                end
            }
            
            function service:Wait()
                return 0.03 -- Simulate 30 FPS
            end
        elseif name == "Players" then
            service.LocalPlayer = {
                Name = "TestPlayer"
            }
        elseif name == "Stats" then
            service.PerformanceStats = {
                Ping = 0
            }
            function service:GetValue(category, name)
                if category == "PerformanceStats" and name == "Ping" then
                    return 50 -- Mock ping value
                end
                return 0
            end
        elseif name == "Workspace" then
            service.CurrentCamera = {
                ViewportSize = Vector2.new(1920, 1080)
            }
        elseif name == "HttpService" then
            function service:JSONEncode(data)
                return "{}"
            end
            
            function service:JSONDecode(json)
                return {}
            end
        elseif name == "CoreGui" then
            -- Mock CoreGui service
            service.Name = "CoreGui"
            
            function service:FindFirstChild(name)
                return nil
            end

            print("Test mode: Using mock CoreGui as parent")
        end
        
        return service
    end
    
    function game:GetService(serviceName)
        return createMockService(serviceName)
    end
    
    -- Mock Drawing library
    if not _G.Drawing then
        _G.Drawing = {
            Fonts = {
                Plex = 3,
                UI = 1,
                System = 2,
                Monospace = 4
            }
        }
        
        function Drawing.new(drawingType)
            local obj = {
                __OBJECT_EXISTS = true,
                Visible = false,
                Transparency = 1,
                Color = {R = 255, G = 255, B = 255},
                Size = {x = 0, y = 0},
                Position = {x = 0, y = 0},
                TextBounds = {x = 0, y = 0},
                Radius = 0,
                Text = "",
                Font = 3,
                Remove = function() obj.__OBJECT_EXISTS = false end
            }
            return obj
        end
    end
    
    -- Mock file system functions
    if not isfolder then
        function isfolder(path)
            return false
        end
        
        function makefolder(path)
            print("Mock: Created folder " .. path)
        end
        
        function isfile(path)
            return false
        end
        
        function readfile(path)
            return ""
        end
        
        function writefile(path, content)
            print("Mock: Wrote to file " .. path)
        end
    end
    
    print("Running in test mode with mock Roblox environment")
end

-- // Error handling for executor compatibility
local function safeCall(func, ...)
    local success, result = pcall(func, ...)
    if not success then
        local warnFunc = warn or print -- Use warn if available (Roblox), otherwise use print
        warnFunc("Octernal Library Error: ", result)
        return nil
    end
    return result
end

-- // Variables
-- Создаем безопасные копии в случае, если мы не в среде Roblox
local safeVector2 = Vector2
if not Vector2 then
    safeVector2 = {}
    safeVector2.new = function(x, y) return {x = x or 0, y = y or 0} end
end

-- Безопасная версия Color3
local safeColor3 = Color3
if not Color3 then
    safeColor3 = {}
    safeColor3.fromRGB = function(r, g, b)
        return {R = r/255, G = g/255, B = b/255, r = r, g = g, b = b}
    end
    safeColor3.new = function(r, g, b)
        return {R = r, G = g, B = b, r = r*255, g = g*255, b = b*255}
    end
end

-- Безопасный Drawing
if not Drawing then
    Drawing = {}
    Drawing.Fonts = {
        Plex = 3,
        UI = 1,
        System = 2,
        Monospace = 4
    }
    
    Drawing.new = function(drawingType)
        local obj = {
            __OBJECT_EXISTS = true,
            Visible = false,
            Transparency = 1,
            Color = {R = 255, G = 255, B = 255},
            Size = {x = 0, y = 0},
            Position = {x = 0, y = 0},
            TextBounds = {x = 0, y = 0},
            Radius = 0,
            Text = "",
            Font = 3
        }
        
        obj.Remove = function() 
            obj.__OBJECT_EXISTS = false 
        end
        
        return obj
    end
end

-- Безопасные версии сервисов Roblox
local function getSafeService(serviceName, defaultValue)
    if not game or not game.GetService then
        return defaultValue
    end
    
    local success, service = pcall(function() 
        return game:GetService(serviceName)
    end)
    
    if not success or not service then
        return defaultValue
    end
    
    return service
end

-- Безопасно получаем все необходимые сервисы
local ws = getSafeService("Workspace", {
    CurrentCamera = {
        ViewportSize = safeVector2.new(1920, 1080)
    }
})

local uis = getSafeService("UserInputService", {
    InputBegan = {
        Connect = function() return {Disconnect = function() end} end
    },
    InputChanged = {
        Connect = function() return {Disconnect = function() end} end
    },
    InputEnded = {
        Connect = function() return {Disconnect = function() end} end
    },
    GetMouseLocation = function() return safeVector2.new(0, 0) end
})

local rs = getSafeService("RunService", {
    RenderStepped = {
        Connect = function(_, callback) 
            callback(0.03)
            return {Disconnect = function() end}
        end,
        Wait = function() return 0.03 end
    },
    Heartbeat = {
        Connect = function() return {Disconnect = function() end} end
    }
})

local hs = getSafeService("HttpService", {
    JSONEncode = function(_, data) return tostring(data) end,
    JSONDecode = function(_, str) return {data = str} end
})

local plrs = getSafeService("Players", {
    LocalPlayer = {Name = "TestPlayer"}
})

local stats = getSafeService("Stats", {
    PerformanceStats = {Ping = 0},
    GetValue = function() return 50 end
})

-- UI Variables
local library = {
    drawings = {},
    hidden = {},
    connections = {},
    pointers = {},
    began = {},
    changed = {},
    ended = {},
    colors = {},
    folders = {
        main = "Linux",
        assets = "Linux/assets",
        configs = "Linux/configs"
    },
    shared = {
        initialized = false,
        fps = 0,
        ping = 0,
        connections = {}
    },
    -- Solara v3 compatibility - Executor specific paths
    executor_folders = {
        ["Synapse X"] = "synapse",
        ["ScriptWare"] = "script-ware",
        ["Krnl"] = "krnl",
        ["Electron"] = "electron",
        ["Fluxus"] = "fluxus",
        ["Solara"] = "solara",
        ["Octagon"] = "octagon",
        ["Oxygen U"] = "oxygen-u"
    }
}

-- // Solara v3 compatibility - Detect executor and adjust folder paths
local function detectExecutor()
    local executorInfo = identifyexecutor and safeCall(identifyexecutor) or "Unknown"
    
    -- Detect if using Solara
    if executorInfo and executorInfo:find("Solara") then
        library.folders.main = "Solara"
        library.folders.assets = "Solara/assets"
        library.folders.configs = "Solara/configs"
    end
end

-- Try to detect the executor for proper folder paths
safeCall(detectExecutor)

-- // Solara v3 compatibility - Create folders with error handling
for i, v in pairs(library.folders) do
    safeCall(function()
        local isFolder = isfolder
        if not isFolder or not isFolder(v) then
            local makeFolder = makefolder
            if makeFolder then
                makeFolder(v)
            end
        end
    end)
end

-- // Solara v3 compatibility - Check executor support
local function checkExecutorSupport()
    local supportedFeatures = {
        drawing = safeCall(function() return Drawing ~= nil end) or false,
        httpget = safeCall(function() return game.HttpGet ~= nil end) or false,
        filesystem = safeCall(function() return isfile ~= nil and readfile ~= nil and writefile ~= nil end) or false
    }
    
    local result = supportedFeatures.drawing and supportedFeatures.httpget and supportedFeatures.filesystem
    
    if not result then
        local warnFunc = warn or print
        warnFunc("Octernal Library Warning: Some executor features may not be supported")
        warnFunc("Drawing support: " .. tostring(supportedFeatures.drawing))
        warnFunc("HttpGet support: " .. tostring(supportedFeatures.httpget))
        warnFunc("FileSystem support: " .. tostring(supportedFeatures.filesystem))
        warnFunc("Some features may not work with this executor")
    end
    
    return result
end

-- Check executor compatibility
checkExecutorSupport()

-- // Utility Functions
local utility = {}
local pages = {}
local sections = {}
local theme = {
    accent = safeColor3.fromRGB(55, 175, 225),
    lightcontrast = safeColor3.fromRGB(30, 30, 30),
    darkcontrast = safeColor3.fromRGB(25, 25, 25),
    outline = safeColor3.fromRGB(0, 0, 0),
    inline = safeColor3.fromRGB(50, 50, 50),
    textcolor = safeColor3.fromRGB(255, 255, 255),
    textborder = safeColor3.fromRGB(0, 0, 0),
    cursoroutline = safeColor3.fromRGB(10, 10, 10),
    font = Drawing.Fonts.Plex,
    textsize = 13
}

do
    function utility:Size(xScale,xOffset,yScale,yOffset,instance)
        -- Ensure all parameters have default values
        xScale = xScale or 0
        xOffset = xOffset or 0
        yScale = yScale or 0
        yOffset = yOffset or 0
        
        if instance and instance.Size then
            local x = xScale*instance.Size.x+xOffset
            local y = yScale*instance.Size.y+yOffset
            --
            return Vector2.new(x,y)
        else
            local vx,vy = 1920, 1080
            if ws and ws.CurrentCamera and ws.CurrentCamera.ViewportSize then
                vx, vy = ws.CurrentCamera.ViewportSize.x, ws.CurrentCamera.ViewportSize.y
            end
            --
            local x = xScale*vx+xOffset
            local y = yScale*vy+yOffset
            --
            return Vector2.new(x,y)
        end
    end
    --
    function utility:Position(xScale,xOffset,yScale,yOffset,instance)
        -- Ensure all parameters have default values
        xScale = xScale or 0
        xOffset = xOffset or 0
        yScale = yScale or 0
        yOffset = yOffset or 0
        
        if instance and instance.Position and instance.Size then
            local x = instance.Position.x+xScale*instance.Size.x+xOffset
            local y = instance.Position.y+yScale*instance.Size.y+yOffset
            --
            return Vector2.new(x,y)
        else
            local vx,vy = 1920, 1080
            if ws and ws.CurrentCamera and ws.CurrentCamera.ViewportSize then
                vx, vy = ws.CurrentCamera.ViewportSize.x, ws.CurrentCamera.ViewportSize.y
            end
            --
            local x = xScale*vx+xOffset
            local y = yScale*vy+yOffset
            --
            return Vector2.new(x,y)
        end
    end
    --
    function utility:CreateInstance(instanceType, properties)
        local instance = Instance.new(instanceType)
        if type(properties) == "table" then
            for property, value in next, properties do
                instance[property] = value
            end
        end
        return instance
    end
    --
    function utility:Create(instanceType, instanceOffset, instanceProperties, instanceParent)
        local instanceType = instanceType or "Frame"
        local instanceOffset = instanceOffset or {Vector2.new(0,0)}
        local instanceProperties = instanceProperties or {}
        local instanceHidden = false
        local instance = nil
        --
        if instanceType == "Frame" or instanceType == "frame" then
            local frame = Drawing.new("Square")
            frame.Visible = true
            frame.Filled = true
            frame.Thickness = 0
            frame.Color = safeColor3.fromRGB(255,255,255)
            frame.Size = Vector2.new(100,100)
            frame.Position = Vector2.new(0,0)
            frame.ZIndex = 1000
            frame.Transparency = library.shared.initialized and 1 or 0
            instance = frame
        elseif instanceType == "TextLabel" or instanceType == "textlabel" then
            local text = Drawing.new("Text")
            text.Font = 3
            text.Visible = true
            text.Outline = true
            text.Center = false
            text.Color = safeColor3.fromRGB(255,255,255)
            text.ZIndex = 1000
            text.Transparency = library.shared.initialized and 1 or 0
            instance = text
        elseif instanceType == "Triangle" or instanceType == "triangle" then
            local frame = Drawing.new("Triangle")
            frame.Visible = true
            frame.Filled = true
            frame.Thickness = 0
            frame.Color = safeColor3.fromRGB(255,255,255)
            frame.ZIndex = 1000
            frame.Transparency = library.shared.initialized and 1 or 0
            instance = frame
        elseif instanceType == "Image" or instanceType == "image" then
            local image = Drawing.new("Image")
            image.Size = Vector2.new(12,19)
            image.Position = Vector2.new(0,0)
            image.Visible = true
            image.ZIndex = 1000
            image.Transparency = library.shared.initialized and 1 or 0
            instance = image
        elseif instanceType == "Circle" or instanceType == "circle" then
            local circle = Drawing.new("Circle")
            circle.Visible = false
            circle.Color = safeColor3.fromRGB(255, 0, 0)
            circle.Thickness = 1
            circle.NumSides = 30
            circle.Filled = true
            circle.Transparency = 1
            circle.ZIndex = 1000
            circle.Radius = 50
            circle.Transparency = library.shared.initialized and 1 or 0
            instance = circle
        elseif instanceType == "Quad" or instanceType == "quad" then
            local quad = Drawing.new("Quad")
            quad.Visible = false
            quad.Color = safeColor3.fromRGB(255, 255, 255)
            quad.Thickness = 1.5
            quad.Transparency = 1
            quad.ZIndex = 1000
            quad.Filled = false
            quad.Transparency = library.shared.initialized and 1 or 0
            instance = quad
        elseif instanceType == "Line" or instanceType == "line" then
            local line = Drawing.new("Line")
            line.Visible = false
            line.Color = safeColor3.fromRGB(255, 255, 255)
            line.Thickness = 1.5
            line.Transparency = 1
            line.Thickness = 1.5
            line.ZIndex = 1000
            line.Transparency = library.shared.initialized and 1 or 0
            instance = line
        end
        --
        if instance then
            for i, v in pairs(instanceProperties) do
                if (i == "Hidden" or i == "hidden") then
                    instanceHidden = v
                else
                    if library.shared.initialized then
                        instance[i] = v
                    elseif i ~= "Transparency" then
                        instance[i] = v
                    end
                end
            end
            --
            if not instanceHidden then
                library.drawings[#library.drawings + 1] = {instance, instanceOffset, instanceProperties["Transparency"] or 1}
            else
                library.hidden[#library.hidden + 1] = {instance, instanceOffset, instanceProperties["Transparency"] or 1}
            end
            --
            if instanceParent then
                instanceParent[#instanceParent + 1] = instance
            end
            --
            return instance
        end
    end
    --
    function utility:UpdateOffset(instance, instanceOffset)
        for i,v in pairs(library.drawings) do
            if v[1] == instance then
                v[2] = instanceOffset
                return
            end
        end
    end
    --
    function utility:UpdateTransparency(instance, instanceTransparency)
        for i,v in pairs(library.drawings) do
            if v[1] == instance then
                v[3] = instanceTransparency
                return
            end
        end
    end
    --
    function utility:Remove(instance, hidden)
        library.colors[instance] = nil
        --
        local ind = 0
        --
        for i,v in pairs(hidden and library.hidden or library.drawings) do
            if v[1] == instance then
                v[1] = nil
                v[2] = nil
                table.remove(hidden and library.hidden or library.drawings, i)
                break
            end
        end
        if instance.__OBJECT_EXISTS then
            instance:Remove()
        end
    end
    --
    function utility:GetSubPrefix(str)
        local str = tostring(str):gsub(" ","")
        local var = ""
        --
        if #str == 2 then
            local sec = string.sub(str,#str,#str+1)
            var = sec == "1" and "st" or sec == "2" and "nd" or sec == "3" and "rd" or "th"
        end
        --
        return var
    end
    --
    function utility:Connection(connectionType, connectionCallback)
        local connection = connectionType:Connect(connectionCallback)
        library.connections[#library.connections + 1] = connection
        --
        return connection
    end
    --
    function utility:Disconnect(connection)
        for i,v in pairs(library.connections) do
            if v == connection then
                library.connections[i] = nil
                v:Disconnect()
            end
        end
    end
    --
    function utility:MouseLocation()
        return safeCall(function() return uis:GetMouseLocation() end) or Vector2.new(0, 0)
    end
    --
    function utility:MouseOverDrawing(values, valuesAdd)
        local valuesAdd = valuesAdd or {}
        local values = {
            (values[1] or 0) + (valuesAdd[1] or 0),
            (values[2] or 0) + (valuesAdd[2] or 0),
            (values[3] or 0) + (valuesAdd[3] or 0),
            (values[4] or 0) + (valuesAdd[4] or 0)
        }
        --
        local mouseLocation = utility:MouseLocation()
        return (mouseLocation.x >= values[1] and mouseLocation.x <= (values[1] + (values[3] - values[1]))) and (mouseLocation.y >= values[2] and mouseLocation.y <= (values[2] + (values[4] - values[2])))
    end
    --
    function utility:GetTextBounds(text, textSize, font)
        local textbounds = Vector2.new(0, 0)
        --
        local textlabel = utility:Create("TextLabel", {Vector2.new(0, 0)}, {
            Text = text,
            Size = textSize,
            Font = font,
            Hidden = true
        })
        --
        textbounds = textlabel.TextBounds
        utility:Remove(textlabel, true)
        --
        return textbounds
    end
    --
    function utility:GetScreenSize()
        return ws.CurrentCamera.ViewportSize
    end
    --
    function utility:LoadImage(instance, imageName, imageLink)
        local data
        --
        -- Solara v3 compatibility - Safe file operations
        local isFileFunc = isfile
        if isFileFunc and safeCall(function() return isFileFunc(library.folders.assets.."/"..imageName..".png") end) then
            local readFileFunc = readfile
            if readFileFunc then
                data = safeCall(function() return readFileFunc(library.folders.assets.."/"..imageName..".png") end)
            end
        else
            if imageLink then
                if game and game.HttpGet then
                    data = safeCall(function() return game:HttpGet(imageLink) end)
                    if data then
                        local writeFileFunc = writefile
                        if writeFileFunc then
                            safeCall(function() 
                                writeFileFunc(library.folders.assets.."/"..imageName..".png", data)
                            end)
                        end
                    end
                end
            else
                return
            end
        end
        --
        if data and instance then
            safeCall(function() instance.Data = data end)
        end
    end
    --
    function utility:Lerp(instance, instanceTo, instanceTime)
        local currentTime = 0
        local currentIndex = {}
        local connection
        --
        for i,v in pairs(instanceTo) do
            currentIndex[i] = instance[i]
        end
        --
        local function lerp()
            for i,v in pairs(instanceTo) do
                if instance.__OBJECT_EXISTS then
                    instance[i] = ((v - currentIndex[i]) * currentTime / instanceTime) + currentIndex[i]
                end
            end
        end
        --
        connection = rs.RenderStepped:Connect(function(delta)
            if currentTime < instanceTime then
                currentTime = currentTime + delta
                lerp()
            else
                connection:Disconnect()
            end
        end)
    end
    --
    function utility:Combine(table1, table2)
        local table3 = {}
        for i,v in pairs(table1) do table3[i] = v end
        local t = #table3
        for z,x in pairs(table2) do table3[z + t] = x end
        return table3
    end
    --
    function utility:WrapText(Text, Size)
        local Max = (Size / 7)
        --
        return Text:sub(0, Max)
    end
end

-- // Library Functions
do
    library.__index = library
    pages.__index = pages
    sections.__index = sections
    --
    function library:New(info)
        local info = info or {}
        local name = info.name or info.Name or info.title or info.Title or "UI Title"
        local size = info.size or info.Size or Vector2.new(504,604)
        local accent = info.accent or info.Accent or info.color or info.Color or theme.accent
        --
        theme.accent = accent
        --
        local KeyCode = (Enum and Enum.KeyCode and Enum.KeyCode.Z) or 90
        local window = {pages = {}, isVisible = false, uibind = KeyCode, currentPage = nil, fading = false, dragging = false, drag = Vector2.new(0,0), currentContent = {frame = nil, dropdown = nil, multibox = nil, colorpicker = nil, keybind = nil}}
        --
        local sizeX = size.X or size.x or 504
        local sizeY = size.Y or size.y or 604
        
        local main_frame = utility:Create("Frame", {Vector2.new(0,0)}, {
            Size = utility:Size(0, sizeX, 0, sizeY),
            Position = utility:Position(0.5, -(sizeX/2) ,0.5, -(sizeY/2)),
            Color = theme.outline
        });window["main_frame"] = main_frame
        --
        library.colors[main_frame] = {
            Color = "outline"
        }
        --
        local frame_inline = utility:Create("Frame", {Vector2.new(1,1), main_frame}, {
            Size = utility:Size(1, -2, 1, -2, main_frame),
            Position = utility:Position(0, 1, 0, 1, main_frame),
            Color = theme.accent
        })
        --
        library.colors[frame_inline] = {
            Color = "accent"
        }
        --
        local inner_frame = utility:Create("Frame", {Vector2.new(1,1), frame_inline}, {
            Size = utility:Size(1, -2, 1, -2, frame_inline),
            Position = utility:Position(0, 1, 0, 1, frame_inline),
            Color = theme.lightcontrast
        })
        --
        library.colors[inner_frame] = {
            Color = "lightcontrast"
        }
        --
        local title = utility:Create("TextLabel", {Vector2.new(4,2), inner_frame}, {
            Text = name,
            Size = theme.textsize,
            Font = theme.font,
            Color = theme.textcolor,
            OutlineColor = theme.textborder,
            Position = utility:Position(0, 4, 0, 2, inner_frame)
        })
        --
        library.colors[title] = {
            OutlineColor = "textborder",
            Color = "textcolor"
        }
        --
        local inner_frame_inline = utility:Create("Frame", {Vector2.new(4,18), inner_frame}, {
            Size = utility:Size(1, -8, 1, -22, inner_frame),
            Position = utility:Position(0, 4, 0, 18, inner_frame),
            Color = theme.inline
        })
        --
        library.colors[inner_frame_inline] = {
            Color = "inline"
        }
        --
        local inner_frame_inline2 = utility:Create("Frame", {Vector2.new(1,1), inner_frame_inline}, {
            Size = utility:Size(1, -2, 1, -2, inner_frame_inline),
            Position = utility:Position(0, 1, 0, 1, inner_frame_inline),
            Color = theme.outline
        })
        --
        library.colors[inner_frame_inline2] = {
            Color = "outline"
        }
        --
        local back_frame = utility:Create("Frame", {Vector2.new(1,1), inner_frame_inline2}, {
            Size = utility:Size(1, -2, 1, -2, inner_frame_inline2),
            Position = utility:Position(0, 1, 0, 1, inner_frame_inline2),
            Color = theme.darkcontrast
        });window["back_frame"] = back_frame
        --
        library.colors[back_frame] = {
            Color = "darkcontrast"
        }
        --
        local tab_frame_inline = utility:Create("Frame", {Vector2.new(4,24), back_frame}, {
            Size = utility:Size(1, -8, 1, -28, back_frame),
            Position = utility:Position(0, 4, 0, 24, back_frame),
            Color = theme.outline
        })
        --
        library.colors[tab_frame_inline] = {
            Color = "outline"
        }
        --
        local tab_frame_inline2 = utility:Create("Frame", {Vector2.new(1,1), tab_frame_inline}, {
            Size = utility:Size(1, -2, 1, -2, tab_frame_inline),
            Position = utility:Position(0, 1, 0, 1, tab_frame_inline),
            Color = theme.inline
        })
        --
        library.colors[tab_frame_inline2] = {
            Color = "inline"
        }
        --
        local tab_frame = utility:Create("Frame", {Vector2.new(1,1), tab_frame_inline2}, {
            Size = utility:Size(1, -2, 1, -2, tab_frame_inline2),
            Position = utility:Position(0, 1, 0, 1, tab_frame_inline2),
            Color = theme.lightcontrast
        });window["tab_frame"] = tab_frame
        --
        library.colors[tab_frame] = {
            Color = "lightcontrast"
        }
        --
        local tab_scroll_frame = utility:Create("Frame", {Vector2.new(0,0), tab_frame}, {
            Size = utility:Size(1, 0, 1, 0, tab_frame),
            Position = utility:Position(0, 0, 0, 0, tab_frame),
            Color = Color3.fromRGB(0, 0, 0),
            Transparency = 0
        })
        --
        local tab_button_layout = utility:Create("TextLabel", {Vector2.new(1,1), tab_scroll_frame}, {
            Text = "",
            Transparency = 0,
        }) -- actually used for layout
        --
        utility:Create("TextLabel", {Vector2.new(0,1), tab_frame}, {
            Size = theme.textsize,
            Position = utility:Position(0, 5, 0, 1, tab_frame),
            Text = "Pages:",
            Color = theme.textcolor,
            OutlineColor = theme.textborder,
            Font = theme.font,
        })
        --
        local page_frame = utility:Create("Frame", {Vector2.new(0,20), tab_frame}, {
            Size = utility:Size(1, 0, 1, -20, tab_frame),
            Position = utility:Position(0, 0, 0, 20, tab_frame),
            Color = safeColor3.fromRGB(0, 0, 0),
            Transparency = 0
        })
        --

        function window:Page(info)
            local info = info or {}
            local name = info.name or info.Name or info.title or info.Title or "New Page"
            --
            local page = {open = false, sections = {}, sectionOffset = {left = 0, right = 0}, window = window}
            --
            local labelSize = utility:GetTextBounds(name, theme.textsize, theme.font)
            local labelSizeY = 20 -- Default size if textbounds not available
            
            if labelSize and labelSize.Y then
                labelSizeY = labelSize.Y
            elseif labelSize and labelSize.y then 
                labelSizeY = labelSize.y
            end
            
            --
            local tabButton = utility:Create("Frame", {Vector2.new(0,0), tab_scroll_frame}, {
                Size = utility:Size(1, 0, 0, labelSizeY + 5),
                Position = utility:Position(0, 0, 0, #window.pages * (labelSizeY + 5), tab_scroll_frame),
                Color = #window.pages == 0 and theme.accent or safeColor3.fromRGB(55, 55, 55),
                Transparency = 0.4
            })
            --
            library.colors[tabButton] = {
                Color = #window.pages == 0 and "accent" or "lightcontrast"
            }
            --
            local tabName = utility:Create("TextLabel", {Vector2.new(2,2), tabButton}, {
                Text = name,
                Size = theme.textsize,
                Font = theme.font,
                Color = theme.textcolor,
                OutlineColor = theme.textborder,
                Position = utility:Position(0, 2, 0, 2, tabButton)
            })
            --
            library.colors[tabName] = {
                OutlineColor = "textborder",
                Color = "textcolor"
            }
            --
            function page:Section(info)
                local info = info or {}
                local name = info.name or info.Name or info.title or info.Title or "New Section"
                local side = info.side or info.Side or "left"
                side = side:lower()
                --
                local section = {window = window, page = page, visibleContent = {}, currentAxis = 20, currentContent = 0}
                --
                -- Безопасно получаем размер tab_frame
                local tabFrameWidth = 400 -- Значение по умолчанию для безопасной работы
                if tab_frame and tab_frame.Size then
                    if type(tab_frame.Size) == "table" and tab_frame.Size.x then
                        tabFrameWidth = tab_frame.Size.x
                    elseif type(tab_frame.Size) == "userdata" and tab_frame.Size.X then
                        tabFrameWidth = tab_frame.Size.X
                    end
                end
                
                local xPos = side == "right" and (tabFrameWidth/2)+2 or 5
                local section_inline = utility:Create("Frame", {Vector2.new(xPos, 5 + page.sectionOffset[side]), page_frame}, {
                    Size = utility:Size(0.5, -7, 0, 22, page_frame),
                    Position = utility:Position(side == "right" and 0.5 or 0, side == "right" and 2 or 5, 0, 5 + page.sectionOffset[side], page_frame),
                    Color = theme.inline,
                    Visible = page.open
                }, section.visibleContent);section["section_inline"] = section_inline
                --
                library.colors[section_inline] = {
                    Color = "inline"
                }
                --
                local section_outline = utility:Create("Frame", {Vector2.new(1,1), section_inline}, {
                    Size = utility:Size(1, -2, 1, -2, section_inline),
                    Position = utility:Position(0, 1, 0, 1, section_inline),
                    Color = theme.outline,
                    Visible = page.open
                }, section.visibleContent)
                --
                library.colors[section_outline] = {
                    Color = "outline"
                }
                --
                local section_frame = utility:Create("Frame", {Vector2.new(1,1), section_outline}, {
                    Size = utility:Size(1, -2, 1, -2, section_outline),
                    Position = utility:Position(0, 1, 0, 1, section_outline),
                    Color = theme.darkcontrast,
                    Visible = page.open
                }, section.visibleContent);section["section_frame"] = section_frame
                --
                library.colors[section_frame] = {
                    Color = "darkcontrast"
                }
                --
                local section_accent = utility:Create("Frame", {Vector2.new(0,0), section_frame}, {
                    Size = utility:Size(1, 0, 0, 1, section_frame),
                    Position = utility:Position(0, 0, 0, 0, section_frame),
                    Color = theme.accent,
                    Visible = page.open
                }, section.visibleContent)
                --
                library.colors[section_accent] = {
                    Color = "accent"
                }
                --
                local section_title = utility:Create("TextLabel", {Vector2.new(3,3), section_frame}, {
                    Text = name,
                    Size = theme.textsize,
                    Font = theme.font,
                    Color = theme.textcolor,
                    OutlineColor = theme.textborder,
                    Position = utility:Position(0, 3, 0, 3, section_frame),
                    Visible = page.open
                }, section.visibleContent)
                --
                library.colors[section_title] = {
                    OutlineColor = "textborder",
                    Color = "textcolor"
                }
                --
                function section:Update()
                    section_inline.Size = utility:Size(0.5, -7, 0, section.currentAxis+4, page_frame)
                    section_outline.Size = utility:Size(1, -2, 1, -2, section_inline)
                    section_frame.Size = utility:Size(1, -2, 1, -2, section_outline)
                end
                --
                page.sectionOffset[side] = page.sectionOffset[side] + 25 + section.currentAxis
                page.sections[#page.sections + 1] = section
                --
                return setmetatable(section, sections)
            end
            --
            function page:Update()
                tab_button_layout.Position = utility:Position(0, 0, 0, 0, tab_scroll_frame)
                
                local textBounds = utility:GetTextBounds(name, theme.textsize, theme.font)
                local boundsY = 20 -- Default height
                
                if textBounds then
                    if textBounds.Y then 
                        boundsY = textBounds.Y
                    elseif textBounds.y then
                        boundsY = textBounds.y
                    end
                end
                
                tab_button_layout.Size = utility:Size(1, 0, 0, #window.pages * (boundsY + 5), tab_scroll_frame)
            end
            --
            window.pages[#window.pages + 1] = page
            page:Update()
            --
            return setmetatable(page, pages)
        end
        --
        function window:Initialize()
            if #window.pages > 0 then
                window.pages[1].open = true
                window.currentPage = window.pages[1]
                --
                for i,v in pairs(window.pages) do
                    v:Update()
                end
            end
            --
            library.shared.initialized = true
            --
            for i,v in pairs(library.drawings) do
                if v and v[1] and v[3] then
                    v[1].Transparency = v[3]
                    if v[1].__OBJECT_EXISTS then
                        if v[1].Transparency == 0 then
                            v[1].Visible = false
                        end
                    end
                end
            end
            --
            library.shared.initialized = false
        end
        --
        window:Initialize()
        --
        local inContact
        local dragging
        local mousePos
        --
        library.began[#library.began + 1] = function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 and window.isVisible and utility:MouseOverDrawing({main_frame.Position.X,main_frame.Position.Y,main_frame.Position.X + main_frame.Size.X,main_frame.Position.Y + 20}) and not window:IsOverContent() then
                dragging = true
                mousePos = Input.Position
            end
        end
        --
        library.changed[#library.changed + 1] = function(Input)
            if dragging and Input.UserInputType == Enum.UserInputType.MouseMovement then
                window:Move(Vector2.new(Input.Position.X - mousePos.X, Input.Position.Y - mousePos.Y))
                mousePos = Input.Position
            end
        end
        --
        library.ended[#library.ended + 1] = function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end
        --
        if window.uibind then
            library.changed[#library.changed + 1] = function(Input)
                if Input.KeyCode == window.uibind then
                    window:Fade()
                end
            end
        end
        --
        for i,v in pairs(window.pages) do
            if i == 1 then
                v.open = true
                window.currentPage = v
            else
                v.open = false
            end
            --
            for i2,v2 in pairs(v.sections) do
                v2:Update()
            end
        end
        --
        if uis and uis.InputBegan then
            library.shared.connections[#library.shared.connections + 1] = uis.InputBegan:Connect(function(Input)
                if library.shared.connections[1] then
                    if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        if window.isVisible then
                            for i,v in pairs(library.began) do
                                v(Input)
                            end
                        end
                    end
                    --
                    if Input.UserInputType == Enum.UserInputType.Keyboard then
                        if window.isVisible then
                            for i,v in pairs(library.began) do
                                v(Input)
                            end
                        end
                    end
                end
            end)
        end
        --
        if uis and uis.InputChanged then
            library.shared.connections[#library.shared.connections + 1] = uis.InputChanged:Connect(function(Input)
                if library.shared.connections[1] then
                    if Input.UserInputType == Enum.UserInputType.MouseMovement then
                        if window.isVisible then
                            for i,v in pairs(library.changed) do
                                v(Input)
                            end
                        end
                    end
                end
            end)
        end
        --
        if uis and uis.InputEnded then
            library.shared.connections[#library.shared.connections + 1] = uis.InputEnded:Connect(function(Input)
                if library.shared.connections[1] then
                    if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                        if window.isVisible then
                            for i,v in pairs(library.ended) do
                                v(Input)
                            end
                        end
                    end
                    --
                    if Input.UserInputType == Enum.UserInputType.Keyboard then
                        if window.isVisible then
                            for i,v in pairs(library.ended) do
                                v(Input)
                            end
                        end
                    end
                end
            end)
        end
        --
        for i,v in pairs(window.pages) do
            for i2,v2 in pairs(v.sections) do
                v2:Update()
            end
        end
        --
        return setmetatable(window, library)
    end
    --
    function pages:Toggle(bool)
        self.open = bool
        --
        for i,v in pairs(self.sections) do
            for i2,v2 in pairs(v.visibleContent) do
                v2.Visible = bool
            end
        end
        --
        if bool then
            self.window.currentPage = self
        end
    end
    --
    function pages:Button(info)
        local info = info or {}
        local name = info.name or info.Name or "Invalid Name"
        local confirm = info.confirm or info.Confirm or false
        local unsafe = info.unsafe or info.Unsafe or false
        local callback = info.callback or info.Callback or function() end
        --
        local window = self.window
        local page = self
        --
        local button = {name = name, confirm = confirm, unsafe = unsafe, callback = callback}
        --
        local labelSize = utility:GetTextBounds(name, theme.textsize, theme.font)
        --
        for i,v in pairs(self.window.pages) do
            local tabButton = utility:Create("Frame", {Vector2.new(0,0), window.tab_scroll_frame}, {
                Size = utility:Size(1, 0, 0, labelSize.Y + 5),
                Position = utility:Position(0, 0, 0, i * (labelSize.Y + 5), window.tab_scroll_frame),
                Color = i == self.window.currentPage and theme.accent or safeColor3.fromRGB(55, 55, 55),
                Transparency = 0.4
            })
            --
            library.colors[tabButton] = {
                Color = i == self.window.currentPage and "accent" or "lightcontrast"
            }
            --
            local tabName = utility:Create("TextLabel", {Vector2.new(2,2), tabButton}, {
                Text = v.name,
                Size = theme.textsize,
                Font = theme.font,
                Color = theme.textcolor,
                OutlineColor = theme.textborder,
                Position = utility:Position(0, 2, 0, 2, tabButton)
            })
            --
            if v.name == page.name then
                tabButton.Color = theme.accent
                --
                library.colors[tabButton] = {
                    Color = "accent"
                }
            else
                tabButton.Color = safeColor3.fromRGB(55, 55, 55)
                --
                library.colors[tabButton] = {
                    Color = "lightcontrast"
                }
            end
            --
            library.began[#library.began + 1] = function(Input)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 and window.isVisible and tabButton.Visible and utility:MouseOverDrawing({tabButton.Position.X,tabButton.Position.Y,tabButton.Position.X + tabButton.Size.X,tabButton.Position.Y + tabButton.Size.Y}) and window.currentPage.name ~= v.name then
                    for i2,v2 in pairs(window.pages) do
                        if v2.name == v.name then
                            v2:Toggle(true)
                        else
                            v2:Toggle(false)
                        end
                    end
                end
            end
            --
            library.colors[tabName] = {
                OutlineColor = "textborder",
                Color = "textcolor"
            }
        end
        --
        return button
    end
    --
    function sections:Label(info)
        local info = info or {}
        local text = info.text or info.Text or "Empty Label"
        local pointer = info.pointer or info.Pointer or nil
        --
        local window = self.window
        local page = self.page
        local section = self
        --
        local label = {axis = section.currentAxis}
        --
        local textObject = utility:Create("TextLabel", {Vector2.new(4,label.axis), section.section_frame}, {
            Text = text,
            Size = theme.textsize,
            Font = theme.font,
            Color = theme.textcolor,
            OutlineColor = theme.textborder,
            Position = utility:Position(0, 4, 0, label.axis, section.section_frame),
            Visible = page.open
        }, section.visibleContent)
        --
        library.colors[textObject] = {
            OutlineColor = "textborder",
            Color = "textcolor"
        }
        --
        function label:set(newText)
            textObject.Text = newText
        end
        --
        if pointer and tostring(pointer) ~= "" and tostring(pointer) ~= " " and not library.pointers[tostring(pointer)] then
            library.pointers[tostring(pointer)] = label
        end
        --
        -- Безопасная обработка TextBounds
        local textBoundsY = 20 -- Значение по умолчанию если TextBounds не определено
        if textObject.TextBounds then
            if textObject.TextBounds.Y then
                textBoundsY = textObject.TextBounds.Y
            elseif textObject.TextBounds.y then
                textBoundsY = textObject.TextBounds.y
            end
        end
        
        section.currentAxis = section.currentAxis + textBoundsY + 4
        section:Update()
        --
        return label
    end
    --
    function sections:Toggle(info)
        local info = info or {}
        local name = info.name or info.Name or "New Toggle"
        local def = info.default or info.Default or false
        local pointer = info.pointer or info.Pointer or nil
        local callback = info.callback or info.Callback or function()end
        --
        local window = self.window
        local page = self.page
        local section = self
        --
        local toggle = {axis = section.currentAxis, current = def, addedAxis = 0, colorpickers = 0, keybind = nil}
        --
        local toggle_outline = utility:Create("Frame", {Vector2.new(4,toggle.axis), section.section_frame}, {
            Size = utility:Size(0, 15, 0, 15),
            Position = utility:Position(0, 4, 0, toggle.axis, section.section_frame),
            Color = theme.outline,
            Visible = page.open
        }, section.visibleContent)
        --
        library.colors[toggle_outline] = {
            Color = "outline"
        }
        --
        local toggle_inline = utility:Create("Frame", {Vector2.new(1,1), toggle_outline}, {
            Size = utility:Size(1, -2, 1, -2, toggle_outline),
            Position = utility:Position(0, 1, 0, 1, toggle_outline),
            Color = theme.inline,
            Visible = page.open
        }, section.visibleContent)
        --
        library.colors[toggle_inline] = {
            Color = "inline"
        }
        --
        local toggle_frame = utility:Create("Frame", {Vector2.new(1,1), toggle_inline}, {
            Size = utility:Size(1, -2, 1, -2, toggle_inline),
            Position = utility:Position(0, 1, 0, 1, toggle_inline),
            Color = toggle.current == true and theme.accent or theme.lightcontrast,
            Visible = page.open
        }, section.visibleContent)
        --
        library.colors[toggle_frame] = {
            Color = toggle.current == true and "accent" or "lightcontrast"
        }
        --
        local toggle__gradient = utility:Create("Image", {Vector2.new(0,0), toggle_frame}, {
            Size = utility:Size(1, 0, 1, 0, toggle_frame),
            Position = utility:Position(0, 0, 0 , 0, toggle_frame),
            Transparency = 0.5,
            Visible = page.open
        }, section.visibleContent)
        --
        -- Безопасная обработка TextBounds
        local textBounds = utility:GetTextBounds(name, theme.textsize, theme.font)
        local textBoundsY = 10 -- Значение по умолчанию
        
        if textBounds then
            if textBounds.Y then
                textBoundsY = textBounds.Y
            elseif textBounds.y then
                textBoundsY = textBounds.y
            end
        end
        
        local toggleTitlePosition = toggle.axis + (15/2) - (textBoundsY/2)
        
        local toggle_title = utility:Create("TextLabel", {Vector2.new(23, toggleTitlePosition), section.section_frame}, {
            Text = name,
            Size = theme.textsize,
            Font = theme.font,
            Color = theme.textcolor,
            OutlineColor = theme.textborder,
            Position = utility:Position(0, 23, 0, toggleTitlePosition, section.section_frame),
            Visible = page.open
        }, section.visibleContent)
        --
        library.colors[toggle_title] = {
            OutlineColor = "textborder",
            Color = "textcolor"
        }
        --
        utility:LoadImage(toggle__gradient, "gradient", "https://i.imgur.com/5hmlrjX.png")
        --
        function toggle:get()
            return toggle.current
        end
        --
        function toggle:set(bool)
            if bool or not bool then
                toggle.current = bool
                toggle_frame.Color = toggle.current == true and theme.accent or theme.lightcontrast
                --
                library.colors[toggle_frame] = {
                    Color = toggle.current == true and "accent" or "lightcontrast"
                }
                --
                callback(toggle.current)
            end
        end
        --
        function toggle:set_callback(p_callback)
            callback = p_callback
            callback(self:get())
        end
        --
        library.colors[toggle_frame] = {
            Color = toggle.current == true and "accent" or "lightcontrast"
        }
        --
        library.began[#library.began + 1] = function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 and toggle_outline.Visible and window.isVisible and page.open and utility:MouseOverDrawing({section.section_frame.Position.X, section.section_frame.Position.Y + toggle.axis, section.section_frame.Position.X + section.section_frame.Size.X - toggle.addedAxis, section.section_frame.Position.Y + toggle.axis + 15}) and not window:IsOverContent() then
                toggle.current = not toggle.current
                toggle_frame.Color = toggle.current == true and theme.accent or theme.lightcontrast
                --
                library.colors[toggle_frame] = {
                    Color = toggle.current == true and "accent" or "lightcontrast"
                }
                --
                callback(toggle.current)
            end
        end
        --
        if pointer and tostring(pointer) ~= "" and tostring(pointer) ~= " " and not library.pointers[tostring(pointer)] then
            library.pointers[tostring(pointer)] = toggle
        end
        --
        section.currentAxis = section.currentAxis + 15 + 4
        section:Update()
        --
        return toggle
    end
    --
    function sections:Button(info)
        local info = info or {}
        local name = info.name or info.Name or "New Button"
        local pointer = info.pointer or info.Pointer or nil
        local callback = info.callback or info.Callback or function() end
        --
        local window = self.window
        local page = self.page
        local section = self
        --
        local button = {axis = section.currentAxis}
        --
        local button_outline = utility:Create("Frame", {Vector2.new(4,button.axis), section.section_frame}, {
            Size = utility:Size(1, -8, 0, 20, section.section_frame),
            Position = utility:Position(0, 4, 0, button.axis, section.section_frame),
            Color = theme.outline,
            Visible = page.open
        }, section.visibleContent)
        --
        library.colors[button_outline] = {
            Color = "outline"
        }
        --
        local button_inline = utility:Create("Frame", {Vector2.new(1,1), button_outline}, {
            Size = utility:Size(1, -2, 1, -2, button_outline),
            Position = utility:Position(0, 1, 0, 1, button_outline),
            Color = theme.inline,
            Visible = page.open
        }, section.visibleContent)
        --
        library.colors[button_inline] = {
            Color = "inline"
        }
        --
        local button_frame = utility:Create("Frame", {Vector2.new(1,1), button_inline}, {
            Size = utility:Size(1, -2, 1, -2, button_inline),
            Position = utility:Position(0, 1, 0, 1, button_inline),
            Color = theme.lightcontrast,
            Visible = page.open
        }, section.visibleContent)
        --
        library.colors[button_frame] = {
            Color = "lightcontrast"
        }
        --
        local button_gradient = utility:Create("Image", {Vector2.new(0,0), button_frame}, {
            Size = utility:Size(1, 0, 1, 0, button_frame),
            Position = utility:Position(0, 0, 0 , 0, button_frame),
            Transparency = 0.5,
            Visible = page.open
        }, section.visibleContent)
        --
        -- Безопасная обработка размера кнопки
        local buttonWidth = 100 -- Значение по умолчанию
        if button_frame.Size and button_frame.Size.X then
            buttonWidth = button_frame.Size.X
        elseif button_frame.Size and button_frame.Size.x then
            buttonWidth = button_frame.Size.x
        end
        
        local button_title = utility:Create("TextLabel", {Vector2.new(buttonWidth/2,1), button_frame}, {
            Text = name,
            Size = theme.textsize,
            Font = theme.font,
            Color = theme.textcolor,
            OutlineColor = theme.textborder,
            Center = true,
            Position = utility:Position(0.5, 0, 0, 1, button_frame),
            Visible = page.open
        }, section.visibleContent)
        --
        library.colors[button_title] = {
            OutlineColor = "textborder",
            Color = "textcolor"
        }
        --
        utility:LoadImage(button_gradient, "gradient", "https://i.imgur.com/5hmlrjX.png")
        --
        function button:get()
            return nil
        end
        --
        function button:set(bool)
            if bool or not bool then
               callback()
            end
        end
        --
        function button:set_callback(p_callback)
            callback = p_callback
        end
        --
        library.began[#library.began + 1] = function(Input)
            if Input.UserInputType == Enum.UserInputType.MouseButton1 and button_outline.Visible and window.isVisible and utility:MouseOverDrawing({section.section_frame.Position.X, section.section_frame.Position.Y + button.axis, section.section_frame.Position.X + section.section_frame.Size.X, section.section_frame.Position.Y + button.axis + 20}) and not window:IsOverContent() then
                callback()
            end
        end
        --
        if pointer and tostring(pointer) ~= "" and tostring(pointer) ~= " " and not library.pointers[tostring(pointer)] then
            library.pointers[tostring(pointer)] = button
        end
        --
        section.currentAxis = section.currentAxis + 20 + 4
        section:Update()
        --
        return button
    end
end

function library:Initialize()
    for i,v in pairs(library.shared.drawings) do
        v[1].Visible = true
    end

    self.isVisible = true
end

function library:Move(vector)
    for i,v in pairs(library.drawings) do
        if v[2][2] then
            v[1].Position = utility:Position(0, v[2][1].X, 0, v[2][1].Y, v[2][2])
        else
            v[1].Position = utility:Position(0, vector.X, 0, vector.Y)
        end
    end
end

function library:Fade()
    self.isVisible = not self.isVisible
    --
    local active = true
    --
    for i,v in pairs(library.drawings) do
        if active then
            if not v[1].Transparency or v[1].Transparency ~= (self.isVisible and v[3] or 0) then
                utility:Lerp(v[1], {Transparency = (self.isVisible and v[3] or 0)}, 0.25)
            end
        end
    end
end

-- Автоматический запуск демонстрационного UI при инъекции в Roblox
-- Не запускается в тестовом режиме
if not isTesting then
    -- Проверка, что мы не в тестовом окружении
    local success, result = pcall(function()
        -- Демо-UI для Solara v3
        local demoWindow = library:New({
            name = "Octernal Solara v3 Demo",
            size = Vector2.new(500, 600),
            accent = Color3.fromRGB(55, 175, 225)
        })
        
        -- Создание страниц
        local mainPage = demoWindow:Page({name = "Главная"})
        local settingsPage = demoWindow:Page({name = "Настройки"})
        
        -- Левый раздел на главной странице
        local mainSection = mainPage:Section({name = "Основные функции", side = "left"})
        
        mainSection:Label({text = "Octernal UI Library for Solara v3"})
        
        mainSection:Button({name = "Обычная кнопка", callback = function()
            print("Кнопка нажата!")
        end})
        
        mainSection:Toggle({name = "Переключатель", default = false, callback = function(value)
            print("Переключатель: " .. tostring(value))
        end})
        
        -- Правый раздел на главной странице
        local infoSection = mainPage:Section({name = "Информация", side = "right"})
        
        infoSection:Label({text = "Версия библиотеки: v3.0.0"})
        infoSection:Label({text = "Совместимость: Solara v3+"})
        
        infoSection:Button({name = "Проверка совместимости", callback = function()
            print("Проверка:")
            print("- Drawing: " .. tostring(Drawing ~= nil))
            print("- Filesystem: " .. tostring(isfile ~= nil and readfile ~= nil))
            print("- HttpGet: " .. tostring(game and game.HttpGet ~= nil))
        end})
        
        -- Раздел на странице настроек
        local settingsSection = settingsPage:Section({name = "Настройки UI", side = "left"})
        
        settingsSection:Label({text = "Настройки интерфейса"})
        
        settingsSection:Button({name = "Сбросить позицию", callback = function()
            print("Позиция UI сброшена")
        end})
        
        settingsSection:Toggle({name = "Режим разработчика", default = false, callback = function(value)
            print("Режим разработчика: " .. tostring(value))
        end})
        
        -- Инициализация демо-интерфейса
        demoWindow:Initialize()
        
        return demoWindow
    end)
    
    if not success then
        warn("Ошибка при создании демо-интерфейса:", result)
    end
end

return library, library.pointers, theme
