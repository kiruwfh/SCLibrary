--[[
  UI lib made by (SupremeCreativity) sc.owner

  - Please do not use this without permission, I am working really hard on this UI to make it perfect and do not have a big
    problem with other people using it, please just make sure you message me and ask me before using.
]]

-- / Locals
local Workspace = game:GetService("Workspace")
local Player = game:GetService("Players").LocalPlayer
local Mouse = Player:GetMouse()

-- / Services
local UserInputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local CoreGuiService = game:GetService("CoreGui")
local ContentService = game:GetService("ContentProvider")
local TeleportService = game:GetService("TeleportService")

-- / Tween table & function
local TweenTable = {
    Default = {
        TweenInfo.new(0.17, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, 0, false, 0)
    }
}
local CreateTween = function(name, speed, style, direction, loop, reverse, delay)
    name = name
    speed = speed or 0.17
    style = style or Enum.EasingStyle.Sine
    direction = direction or Enum.EasingDirection.InOut
    loop = loop or 0
    reverse = reverse or false
    delay = delay or 0

    TweenTable[name] = TweenInfo.new(speed, style, direction, loop, reverse, delay)
end

-- / Dragging
local drag = function(obj, latency)
    obj = obj
    latency = latency or 0.06

    local toggled = nil
    local input = nil
    local start = nil
    local startPos = nil

    local function updateInput(input)
        local Delta = input.Position - start
        local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
        TweenService:Create(obj, TweenInfo.new(latency), {Position = Position}):Play()
    end

    obj.InputBegan:Connect(function(inp)
        if (inp.UserInputType == Enum.UserInputType.MouseButton1) then
            toggled = true
            start = inp.Position
            startPos = obj.Position
            inp.Changed:Connect(function()
                if (inp.UserInputState == Enum.UserInputState.End) then
                    toggled = false
                end
            end)
        end
    end)

    obj.InputChanged:Connect(function(inp)
        if (inp.UserInputType == Enum.UserInputType.MouseMovement) then
            input = inp
        end
    end)

    UserInputService.InputChanged:Connect(function(inp)
        if (inp == input and toggled) then
            updateInput(inp)
        end
    end)
end

local library = {
    version = "2.0.2",
    title = "SC " .. tostring(math.random(1,366)),
    fps = 0,
    rank = "private"
}

-- The correct key for the library
local CorrectKey = "hh.hg**@@"
local KeyEntered = false

coroutine.wrap(function()
    RunService.RenderStepped:Connect(function(v)
        library.fps = math.floor(1/v + 0.5) -- Using math.floor with rounding instead of math.round
    end)
end)()

function library:RoundNumber(int, float)
    return tonumber(string.format("%." .. (int or 0) .. "f", float))
end

function library:GetUsername()
    return Player.Name
end

function library:CheckIfLoaded()
    if game:IsLoaded() then
        return true
    else
        return false
    end
end

function library:GetUserId()
    return Player.UserId
end

function library:GetPlaceId()
    return game.PlaceId
end

function library:GetJobId()
    return game.JobId
end

function library:Rejoin()
    TeleportService:TeleportToPlaceInstance(library:GetPlaceId(), library:GetJobId(), library:GetUserId())
end

function library:Copy(input) -- only works with synapse
    if syn then
        syn.write_clipboard(input)
    else
        warn("Synapse is not available. Copy function will not work.")
    end
end

function library:GetDay(type)
    if type == "word" then -- day in a full word
        return os.date("%A")
    elseif type == "short" then -- day in a shortened word
        return os.date("%a")
    elseif type == "month" then -- day of the month in digits
        return os.date("%d")
    elseif type == "year" then -- day of the year in digits
        return os.date("%j")
    end
end

function library:GetTime(type)
    if type == "24h" then -- time using a 24 hour clock
        return os.date("%H")
    elseif type == "12h" then -- time using a 12 hour clock
        return os.date("%I")
    elseif type == "minute" then -- time in minutes
        return os.date("%M")
    elseif type == "half" then -- what part of the day it is (AM or PM)
        return os.date("%p")
    elseif type == "second" then -- time in seconds
        return os.date("%S")
    elseif type == "full" then -- full time
        return os.date("%X")
    elseif type == "ISO" then -- ISO / UTC ( 1min = 1, 1hour = 100)
        return os.date("%z")
    elseif type == "zone" then -- time zone
        return os.date("%Z")
    end
end

function library:GetMonth(type)
    if type == "word" then -- full month name
        return os.date("%B")
    elseif type == "short" then -- month in shortened word
        return os.date("%b")
    elseif type == "digit" then -- the months digit
        return os.date("%m")
    end
end

function library:GetWeek(type)
    if type == "year_S" then -- the number of the week in the current year (sunday first day)
        return os.date("%U")
    elseif type == "day" then -- the week day
        return os.date("%w")
    elseif type == "year_M" then -- the number of the week in the current year (monday first day)
        return os.date("%W")
    end
end

function library:GetYear(type)
    if type == "digits" then -- the second 2 digits of the year
        return os.date("%y")
    elseif type == "full" then -- the full year
        return os.date("%Y")
    end
end

function library:UnlockFps(new) -- syn only
    if syn then
        setfpscap(new)
    end
end

function library:Watermark(text)
    -- Add small delay before interacting with Player.PlayerGui
    task.wait()
    
    -- Clear any existing watermarks
    for _, v in pairs(Player.PlayerGui:GetChildren()) do
        if v.Name == "SCUI_Watermark" then
            v:Destroy()
        end
    end

    text = text or "SC v2"

    local watermark = Instance.new("ScreenGui")
    watermark.Name = "SCUI_Watermark"
    watermark.Parent = Player.PlayerGui
    watermark.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local watermarkLayout = Instance.new("UIListLayout")
    watermarkLayout.Name = "watermarkLayout"
    watermarkLayout.Parent = watermark
    watermarkLayout.FillDirection = Enum.FillDirection.Horizontal
    watermarkLayout.SortOrder = Enum.SortOrder.LayoutOrder
    watermarkLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
    watermarkLayout.Padding = UDim.new(0, 4)

    local watermarkPadding = Instance.new("UIPadding")
    watermarkPadding.Name = "watermarkPadding"
    watermarkPadding.Parent = watermark
    watermarkPadding.PaddingBottom = UDim.new(0, 6)
    watermarkPadding.PaddingLeft = UDim.new(0, 6)

    -- Function to create watermark element (for reusability)
    local function createWatermarkElement(text)
        local edge = Instance.new("Frame")
        edge.Name = "edge"
        edge.AnchorPoint = Vector2.new(0.5, 0.5)
        edge.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        edge.Position = UDim2.new(0.5, 0, -0.03, 0)
        edge.Size = UDim2.new(0, 0, 0, 26)
        edge.BackgroundTransparency = 1

        local edgeCorner = Instance.new("UICorner")
        edgeCorner.CornerRadius = UDim.new(0, 2)
        edgeCorner.Name = "edgeCorner"
        edgeCorner.Parent = edge

        local background = Instance.new("Frame")
        background.Name = "background"
        background.Parent = edge
        background.AnchorPoint = Vector2.new(0.5, 0.5)
        background.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        background.BackgroundTransparency = 1
        background.ClipsDescendants = true
        background.Position = UDim2.new(0.5, 0, 0.5, 0)
        background.Size = UDim2.new(0, 0, 0, 24)

        local barFolder = Instance.new("Folder")
        barFolder.Name = "barFolder"
        barFolder.Parent = background

        local bar = Instance.new("Frame")
        bar.Name = "bar"
        bar.Parent = barFolder
        bar.BackgroundColor3 = Color3.fromRGB(159, 115, 255)
        bar.BackgroundTransparency = 0
        bar.Size = UDim2.new(0, 0, 0, 1)

        local barCorner = Instance.new("UICorner")
        barCorner.CornerRadius = UDim.new(0, 2)
        barCorner.Name = "barCorner"
        barCorner.Parent = bar

        local barLayout = Instance.new("UIListLayout")
        barLayout.Name = "barLayout"
        barLayout.Parent = barFolder
        barLayout.SortOrder = Enum.SortOrder.LayoutOrder

        local backgroundGradient = Instance.new("UIGradient")
        backgroundGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(34, 34, 34)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(28, 28, 28))}
        backgroundGradient.Rotation = 90
        backgroundGradient.Name = "backgroundGradient"
        backgroundGradient.Parent = background

        local backgroundCorner = Instance.new("UICorner")
        backgroundCorner.CornerRadius = UDim.new(0, 2)
        backgroundCorner.Name = "backgroundCorner"
        backgroundCorner.Parent = background

        local waterText = Instance.new("TextLabel")
        waterText.Name = "notifText"
        waterText.Parent = background
        waterText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        waterText.BackgroundTransparency = 1.000
        waterText.Position = UDim2.new(0, 0, -0.0416666679, 0)
        waterText.Size = UDim2.new(0, 0, 0, 24)
        waterText.Font = Enum.Font.Code
        waterText.Text = text
        waterText.TextColor3 = Color3.fromRGB(198, 198, 198)
        waterText.TextTransparency = 1
        waterText.TextSize = 14.000
        waterText.RichText = true

        local NewSize = TextService:GetTextSize(waterText.Text, waterText.TextSize, waterText.Font, Vector2.new(math.huge, math.huge))
        waterText.Size = UDim2.new(0, NewSize.X + 8, 0, 24)

        local waterPadding = Instance.new("UIPadding")
        waterPadding.Name = "waterPadding"
        waterPadding.Parent = waterText
        waterPadding.PaddingBottom = UDim.new(0, 4)
        waterPadding.PaddingLeft = UDim.new(0, 4)
        waterPadding.PaddingRight = UDim.new(0, 4)
        waterPadding.PaddingTop = UDim.new(0, 4)

        local backgroundLayout = Instance.new("UIListLayout")
        backgroundLayout.Name = "backgroundLayout"
        backgroundLayout.Parent = background
        backgroundLayout.SortOrder = Enum.SortOrder.LayoutOrder
        backgroundLayout.VerticalAlignment = Enum.VerticalAlignment.Center

        return edge, background, bar, waterText, NewSize
    end

    CreateTween("wm", 0.24)
    CreateTween("wm_2", 0.04)

    -- Create first watermark element
    local edge, background, bar, waterText, NewSize = createWatermarkElement(text)
    edge.Parent = watermark
    
    -- Animate the watermark appearance
    coroutine.wrap(function()
        TweenService:Create(edge, TweenTable["wm"], {BackgroundTransparency = 0}):Play()
        TweenService:Create(edge, TweenTable["wm"], {Size = UDim2.new(0, NewSize.X + 10, 0, 26)}):Play()
        TweenService:Create(background, TweenTable["wm"], {BackgroundTransparency = 0}):Play()
        TweenService:Create(background, TweenTable["wm"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
        wait(0.2)
        TweenService:Create(bar, TweenTable["wm"], {Size = UDim2.new(0, NewSize.X + 8, 0, 1)}):Play()
        wait(0.1)
        TweenService:Create(waterText, TweenTable["wm"], {TextTransparency = 0}):Play()
    end)()

    local WatermarkFunctions = {}
    
    function WatermarkFunctions:AddWatermark(text)
        text = text or "SC v2"

        local edge, background, bar, waterText, NewSize = createWatermarkElement(text)
        edge.Parent = watermark

        coroutine.wrap(function()
            TweenService:Create(edge, TweenTable["wm"], {BackgroundTransparency = 0}):Play()
            TweenService:Create(edge, TweenTable["wm"], {Size = UDim2.new(0, NewSize.X + 10, 0, 26)}):Play()
            TweenService:Create(background, TweenTable["wm"], {BackgroundTransparency = 0}):Play()
            TweenService:Create(background, TweenTable["wm"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
            wait(0.2)
            TweenService:Create(bar, TweenTable["wm"], {Size = UDim2.new(0, NewSize.X + 8, 0, 1)}):Play()
            wait(0.1)
            TweenService:Create(waterText, TweenTable["wm"], {TextTransparency = 0}):Play()
        end)()

        local NewWatermarkFunctions = {}
        
        function NewWatermarkFunctions:Hide()
            edge.Visible = false
            return NewWatermarkFunctions
        end
        
        function NewWatermarkFunctions:Show()
            edge.Visible = true
            return NewWatermarkFunctions
        end
        
        function NewWatermarkFunctions:Text(new)
            new = new or text
            waterText.Text = new

            local NewSize = TextService:GetTextSize(waterText.Text, waterText.TextSize, waterText.Font, Vector2.new(math.huge, math.huge))
            coroutine.wrap(function()
                TweenService:Create(edge, TweenTable["wm_2"], {Size = UDim2.new(0, NewSize.X + 10, 0, 26)}):Play()
                TweenService:Create(background, TweenTable["wm_2"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
                TweenService:Create(bar, TweenTable["wm_2"], {Size = UDim2.new(0, NewSize.X + 8, 0, 1)}):Play()
                TweenService:Create(waterText, TweenTable["wm_2"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
            end)()

            return NewWatermarkFunctions
        end
        
        return NewWatermarkFunctions
    end
    
    function WatermarkFunctions:Remove()
        watermark:Destroy()
        return WatermarkFunctions
    end
    
    return WatermarkFunctions
end

function library:InitNotifications()
    -- Add small delay before interacting with Player.PlayerGui
    task.wait()
    
    -- Clear any existing notification UIs
    for _, v in next, Player.PlayerGui:GetChildren() do
        if v.Name == "SCUI_Notifications" then
            v:Destroy()
        end
    end

    local Notifications = Instance.new("ScreenGui")
    local notificationsLayout = Instance.new("UIListLayout")
    local notificationsPadding = Instance.new("UIPadding")

    Notifications.Name = "SCUI_Notifications"
    Notifications.Parent = Player.PlayerGui
    Notifications.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    notificationsLayout.Name = "notificationsLayout"
    notificationsLayout.Parent = Notifications
    notificationsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    notificationsLayout.Padding = UDim.new(0, 4)

    notificationsPadding.Name = "notificationsPadding"
    notificationsPadding.Parent = Notifications
    notificationsPadding.PaddingLeft = UDim.new(0, 6)
    notificationsPadding.PaddingTop = UDim.new(0, 18)

    local Notification = {}
    
    function Notification:Notify(text, duration, type, callback)
        CreateTween("notification_load", 0.2)

        text = text or "please wait."
        duration = duration or 5
        type = type or "notification"
        callback = callback or function() end

        local edge = Instance.new("Frame")
        local edgeCorner = Instance.new("UICorner")
        local background = Instance.new("Frame")
        local barFolder = Instance.new("Folder")
        local bar = Instance.new("Frame")
        local barCorner = Instance.new("UICorner")
        local barLayout = Instance.new("UIListLayout")
        local backgroundGradient = Instance.new("UIGradient")
        local backgroundCorner = Instance.new("UICorner")
        local notifText = Instance.new("TextLabel")
        local notifPadding = Instance.new("UIPadding")
        local backgroundLayout = Instance.new("UIListLayout")

        edge.Name = "edge"
        edge.Parent = Notifications
        edge.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        edge.BackgroundTransparency = 1.000
        edge.Size = UDim2.new(0, 0, 0, 26)

        edgeCorner.CornerRadius = UDim.new(0, 2)
        edgeCorner.Name = "edgeCorner"
        edgeCorner.Parent = edge

        background.Name = "background"
        background.Parent = edge
        background.AnchorPoint = Vector2.new(0.5, 0.5)
        background.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        background.BackgroundTransparency = 1.000
        background.ClipsDescendants = true
        background.Position = UDim2.new(0.5, 0, 0.5, 0)
        background.Size = UDim2.new(0, 0, 0, 24)

        barFolder.Name = "barFolder"
        barFolder.Parent = background

        bar.Name = "bar"
        bar.Parent = barFolder
        bar.BackgroundColor3 = Color3.fromRGB(159, 115, 255)
        bar.BackgroundTransparency = 0.200
        bar.Size = UDim2.new(0, 0, 0, 1)
        
        -- Set color based on notification type
        if type == "notification" then
            bar.BackgroundColor3 = Color3.fromRGB(159, 115, 255)
        elseif type == "alert" then
            bar.BackgroundColor3 = Color3.fromRGB(255, 246, 112)
        elseif type == "error" then
            bar.BackgroundColor3 = Color3.fromRGB(255, 74, 77)
        elseif type == "success" then
            bar.BackgroundColor3 = Color3.fromRGB(131, 255, 103)
        elseif type == "information" then
            bar.BackgroundColor3 = Color3.fromRGB(126, 117, 255)
        end

        barCorner.CornerRadius = UDim.new(0, 2)
        barCorner.Name = "barCorner"
        barCorner.Parent = bar

        barLayout.Name = "barLayout"
        barLayout.Parent = barFolder
        barLayout.SortOrder = Enum.SortOrder.LayoutOrder

        backgroundGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(34, 34, 34)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(28, 28, 28))}
        backgroundGradient.Rotation = 90
        backgroundGradient.Name = "backgroundGradient"
        backgroundGradient.Parent = background

        backgroundCorner.CornerRadius = UDim.new(0, 2)
        backgroundCorner.Name = "backgroundCorner"
        backgroundCorner.Parent = background

        notifText.Name = "notifText"
        notifText.Parent = background
        notifText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        notifText.BackgroundTransparency = 1.000
        notifText.Size = UDim2.new(0, 230, 0, 26)
        notifText.Font = Enum.Font.Code
        notifText.Text = text
        notifText.TextColor3 = Color3.fromRGB(198, 198, 198)
        notifText.TextSize = 14.000
        notifText.TextTransparency = 1.000
        notifText.TextXAlignment = Enum.TextXAlignment.Left
        notifText.RichText = true

        notifPadding.Name = "notifPadding"
        notifPadding.Parent = notifText
        notifPadding.PaddingBottom = UDim.new(0, 4)
        notifPadding.PaddingLeft = UDim.new(0, 4)
        notifPadding.PaddingRight = UDim.new(0, 4)
        notifPadding.PaddingTop = UDim.new(0, 4)

        backgroundLayout.Name = "backgroundLayout"
        backgroundLayout.Parent = background
        backgroundLayout.SortOrder = Enum.SortOrder.LayoutOrder
        backgroundLayout.VerticalAlignment = Enum.VerticalAlignment.Center

        local NewSize = TextService:GetTextSize(notifText.Text, notifText.TextSize, notifText.Font, Vector2.new(math.huge, math.huge))
        CreateTween("notification_wait", duration, Enum.EasingStyle.Quad)
        
        local IsRunning = false
        coroutine.wrap(function()
            IsRunning = true
            TweenService:Create(edge, TweenTable["notification_load"], {BackgroundTransparency = 0}):Play()
            TweenService:Create(background, TweenTable["notification_load"], {BackgroundTransparency = 0}):Play()
            TweenService:Create(notifText, TweenTable["notification_load"], {TextTransparency = 0}):Play()
            TweenService:Create(edge, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 10, 0, 26)}):Play()
            TweenService:Create(background, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
            TweenService:Create(notifText, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
            wait()
            TweenService:Create(bar, TweenTable["notification_wait"], {Size = UDim2.new(0, NewSize.X + 8, 0, 1)}):Play()
            repeat wait() until bar.Size == UDim2.new(0, NewSize.X + 8, 0, 1)
            IsRunning = false
            TweenService:Create(edge, TweenTable["notification_load"], {BackgroundTransparency = 1}):Play()
            TweenService:Create(background, TweenTable["notification_load"], {BackgroundTransparency = 1}):Play()
            TweenService:Create(notifText, TweenTable["notification_load"], {TextTransparency = 1}):Play()
            TweenService:Create(bar, TweenTable["notification_load"], {BackgroundTransparency = 1}):Play()
            TweenService:Create(edge, TweenTable["notification_load"], {Size = UDim2.new(0, 0, 0, 26)}):Play()
            TweenService:Create(background, TweenTable["notification_load"], {Size = UDim2.new(0, 0, 0, 24)}):Play()
            TweenService:Create(notifText, TweenTable["notification_load"], {Size = UDim2.new(0, 0, 0, 24)}):Play()
            TweenService:Create(bar, TweenTable["notification_load"], {Size = UDim2.new(0, 0, 0, 1)}):Play()
            wait(0.2)
            edge:Destroy()
            
            if callback then
                callback()
            end
        end)()

        CreateTween("notification_reset", 0.4)
        
        local NotificationFunctions = {}
        
        function NotificationFunctions:Text(new)
            new = new or text
            notifText.Text = new

            NewSize = TextService:GetTextSize(notifText.Text, notifText.TextSize, notifText.Font, Vector2.new(math.huge, math.huge))
            if IsRunning then
                TweenService:Create(edge, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 10, 0, 26)}):Play()
                TweenService:Create(background, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
                TweenService:Create(notifText, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
                wait()
                TweenService:Create(bar, TweenTable["notification_reset"], {Size = UDim2.new(0, 0, 0, 1)}):Play()
                wait(0.4)
                TweenService:Create(bar, TweenTable["notification_wait"], {Size = UDim2.new(0, NewSize.X + 8, 0, 1)}):Play()
            end

            return NotificationFunctions
        end
        
        return NotificationFunctions
    end
    
    return Notification
end

-- Function to create key prompt UI
function library:KeyPrompt()
    -- Clear existing UI
    for _, v in pairs(Player.PlayerGui:GetChildren()) do
        if v.Name == "SCUI_KeyPromptScreen" then
            v:Destroy()
        end
    end
    
    local keyPrompt = Instance.new("ScreenGui")
    keyPrompt.Name = "SCUI_KeyPromptScreen"
    keyPrompt.Parent = Player.PlayerGui
    
    local main = Instance.new("Frame")
    main.Name = "main"
    main.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
    main.BorderSizePixel = 0
    main.Position = UDim2.new(0.5, -150, 0.5, -75)
    main.Size = UDim2.new(0, 300, 0, 150)
    main.Parent = keyPrompt
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5)
    corner.Parent = main
    
    local title = Instance.new("TextLabel")
    title.BackgroundTransparency = 1
    title.Position = UDim2.new(0, 0, 0, 10)
    title.Size = UDim2.new(1, 0, 0, 25)
    title.Font = Enum.Font.Code
    title.Text = "SC UI Library - Key System"
    title.TextColor3 = Color3.fromRGB(159, 115, 255)
    title.TextSize = 18
    title.Parent = main
    
    local textBox = Instance.new("TextBox")
    textBox.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    textBox.BorderSizePixel = 0
    textBox.Position = UDim2.new(0.5, -125, 0.5, -15)
    textBox.Size = UDim2.new(0, 250, 0, 30)
    textBox.Font = Enum.Font.Code
    textBox.PlaceholderText = "Enter key..."
    textBox.Text = ""
    textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    textBox.TextSize = 14
    textBox.Parent = main
    
    local textBoxCorner = Instance.new("UICorner")
    textBoxCorner.CornerRadius = UDim.new(0, 3)
    textBoxCorner.Parent = textBox
    
    local submitButton = Instance.new("TextButton")
    submitButton.BackgroundColor3 = Color3.fromRGB(159, 115, 255)
    submitButton.BorderSizePixel = 0
    submitButton.Position = UDim2.new(0.5, -60, 0.75, 0)
    submitButton.Size = UDim2.new(0, 120, 0, 30)
    submitButton.Font = Enum.Font.Code
    submitButton.Text = "Submit"
    submitButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    submitButton.TextSize = 14
    submitButton.Parent = main
    
    local submitCorner = Instance.new("UICorner")
    submitCorner.CornerRadius = UDim.new(0, 3)
    submitCorner.Parent = submitButton
    
    local resultPromise = Instance.new("BindableEvent")
    
    submitButton.MouseButton1Click:Connect(function()
        local enteredKey = textBox.Text
        if enteredKey == CorrectKey then
            KeyEntered = true
            keyPrompt:Destroy()
            resultPromise:Fire(true)
        else
            -- Shake animation for incorrect key
            for i = 1, 3 do
                main.Position = main.Position + UDim2.new(0, 10, 0, 0)
                wait(0.05)
                main.Position = main.Position - UDim2.new(0, 20, 0, 0)
                wait(0.05)
                main.Position = main.Position + UDim2.new(0, 10, 0, 0)
            end
            textBox.Text = ""
            textBox.PlaceholderText = "Incorrect key!"
            wait(1)
            textBox.PlaceholderText = "Enter key..."
        end
    end)
    
    -- Return a promise that resolves when the correct key is entered
    return resultPromise.Event
end

-- Initialize the library (this will show the intro and key prompt)
function library:Init(key)
    -- Set default keybind or use provided key
    self.keybind = key or Enum.KeyCode.RightAlt
    
    -- Check if key is already entered (allows bypassing the key check for development)
    if not KeyEntered then
        -- Wait for correct key to be entered
        local keySuccess = self:KeyPrompt():Wait()
        if not keySuccess then
            return nil
        end
    end
    
    -- Creating Window UI
    local Window = {}
    
    -- Create main GUI
    local SCUI = Instance.new("ScreenGui")
    SCUI.Name = "SCUI_Main"
    SCUI.Parent = Player.PlayerGui
    SCUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Main Frame
    local main = Instance.new("Frame")
    main.Name = "main"
    main.Parent = SCUI
    main.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
    main.BorderSizePixel = 0
    main.Position = UDim2.new(0.5, -250, 0.5, -150)
    main.Size = UDim2.new(0, 500, 0, 300)
    
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 5)
    mainCorner.Parent = main
    
    -- Header
    local header = Instance.new("Frame")
    header.Name = "header"
    header.Parent = main
    header.BackgroundColor3 = Color3.fromRGB(26, 26, 26)
    header.BorderSizePixel = 0
    header.Size = UDim2.new(1, 0, 0, 30)
    
    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 5)
    headerCorner.Parent = header
    
    local headerTitle = Instance.new("TextLabel")
    headerTitle.Name = "title"
    headerTitle.Parent = header
    headerTitle.BackgroundTransparency = 1
    headerTitle.Position = UDim2.new(0, 10, 0, 0)
    headerTitle.Size = UDim2.new(0, 200, 1, 0)
    headerTitle.Font = Enum.Font.Code
    headerTitle.Text = self.title
    headerTitle.TextColor3 = Color3.fromRGB(159, 115, 255)
    headerTitle.TextSize = 14
    headerTitle.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Close Button
    local closeBtn = Instance.new("TextButton")
    closeBtn.Name = "closeBtn"
    closeBtn.Parent = header
    closeBtn.BackgroundTransparency = 1
    closeBtn.Position = UDim2.new(1, -25, 0, 5)
    closeBtn.Size = UDim2.new(0, 20, 0, 20)
    closeBtn.Font = Enum.Font.Code
    closeBtn.Text = "X"
    closeBtn.TextColor3 = Color3.fromRGB(255, 95, 95)
    closeBtn.TextSize = 18
    
    closeBtn.MouseButton1Click:Connect(function()
        SCUI.Enabled = not SCUI.Enabled
    end)
    
    -- Tab Container
    local tabContainer = Instance.new("Frame")
    tabContainer.Name = "tabContainer"
    tabContainer.Parent = main
    tabContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    tabContainer.BorderSizePixel = 0
    tabContainer.Position = UDim2.new(0, 10, 0, 40)
    tabContainer.Size = UDim2.new(0, 120, 0, 250)
    
    local tabContainerCorner = Instance.new("UICorner")
    tabContainerCorner.CornerRadius = UDim.new(0, 5)
    tabContainerCorner.Parent = tabContainer
    
    local tabList = Instance.new("ScrollingFrame")
    tabList.Name = "tabList"
    tabList.Parent = tabContainer
    tabList.Active = true
    tabList.BackgroundTransparency = 1
    tabList.BorderSizePixel = 0
    tabList.Position = UDim2.new(0, 0, 0, 5)
    tabList.Size = UDim2.new(1, 0, 1, -10)
    tabList.ScrollBarThickness = 0
    tabList.CanvasSize = UDim2.new(0, 0, 0, 0)
    
    local tabListLayout = Instance.new("UIListLayout")
    tabListLayout.Parent = tabList
    tabListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    tabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabListLayout.Padding = UDim.new(0, 5)
    
    -- Content Container
    local contentContainer = Instance.new("Frame")
    contentContainer.Name = "contentContainer"
    contentContainer.Parent = main
    contentContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    contentContainer.BorderSizePixel = 0
    contentContainer.Position = UDim2.new(0, 140, 0, 40)
    contentContainer.Size = UDim2.new(0, 350, 0, 250)
    
    local contentContainerCorner = Instance.new("UICorner")
    contentContainerCorner.CornerRadius = UDim.new(0, 5)
    contentContainerCorner.Parent = contentContainer
    
    -- Enable dragging of the window
    drag(main, 0.1)
    
    -- Enable keybind to toggle UI
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == self.keybind then
            SCUI.Enabled = not SCUI.Enabled
        end
    end)
    
    -- Window functions
    function Window:NewTab(name)
        name = name or "Tab"
        
        -- Create tab button
        local tabButton = Instance.new("TextButton")
        tabButton.Name = "tab_" .. name
        tabButton.Parent = tabList
        tabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        tabButton.BorderSizePixel = 0
        tabButton.Size = UDim2.new(0, 110, 0, 25)
        tabButton.Font = Enum.Font.Code
        tabButton.Text = name
        tabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
        tabButton.TextSize = 14
        
        local tabButtonCorner = Instance.new("UICorner")
        tabButtonCorner.CornerRadius = UDim.new(0, 4)
        tabButtonCorner.Parent = tabButton
        
        -- Update canvas size for the tab list
        tabList.CanvasSize = UDim2.new(0, 0, 0, tabListLayout.AbsoluteContentSize.Y + 10)
        
        -- Create tab content
        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Name = "content_" .. name
        tabContent.Parent = contentContainer
        tabContent.Active = true
        tabContent.BackgroundTransparency = 1
        tabContent.BorderSizePixel = 0
        tabContent.ClipsDescendants = true
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.ScrollBarThickness = 4
        tabContent.Visible = false  -- Start hidden
        tabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        tabContent.ScrollBarImageColor3 = Color3.fromRGB(159, 115, 255)
        
        local tabContentLayout = Instance.new("UIListLayout")
        tabContentLayout.Parent = tabContent
        tabContentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        tabContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        tabContentLayout.Padding = UDim.new(0, 5)
        
        local tabContentPadding = Instance.new("UIPadding")
        tabContentPadding.Parent = tabContent
        tabContentPadding.PaddingTop = UDim.new(0, 8)
        tabContentPadding.PaddingBottom = UDim.new(0, 8)
        
        -- Auto-update canvas size
        tabContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabContent.CanvasSize = UDim2.new(0, 0, 0, tabContentLayout.AbsoluteContentSize.Y + 16)
        end)
        
        -- Tab button click handler
        tabButton.MouseButton1Click:Connect(function()
            -- Hide all tab contents
            for _, child in pairs(contentContainer:GetChildren()) do
                if child:IsA("ScrollingFrame") then
                    child.Visible = false
                end
            end
            
            -- Reset all tab button colors
            for _, child in pairs(tabList:GetChildren()) do
                if child:IsA("TextButton") then
                    child.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    child.TextColor3 = Color3.fromRGB(200, 200, 200)
                end
            end
            
            -- Show this tab content
            tabContent.Visible = true
            
            -- Highlight this tab button
            tabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            tabButton.TextColor3 = Color3.fromRGB(159, 115, 255)
        end)
        
        -- If this is the first tab, show it
        if #tabList:GetChildren() <= 2 then -- Account for UIListLayout
            tabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            tabButton.TextColor3 = Color3.fromRGB(159, 115, 255)
            tabContent.Visible = true
        end
        
        -- Tab content functions
        local Tab = {}
        
        -- Label
        function Tab:NewLabel(text, alignment)
            text = text or "Label"
            alignment = alignment or "left"
            
            local labelFrame = Instance.new("Frame")
            labelFrame.Name = "labelFrame"
            labelFrame.Parent = tabContent
            labelFrame.BackgroundTransparency = 1
            labelFrame.Size = UDim2.new(0.95, 0, 0, 25)
            
            local label = Instance.new("TextLabel")
            label.Name = "label"
            label.Parent = labelFrame
            label.BackgroundTransparency = 1
            label.Size = UDim2.new(1, 0, 1, 0)
            label.Font = Enum.Font.Code
            label.Text = text
            label.TextColor3 = Color3.fromRGB(200, 200, 200)
            label.TextSize = 14
            
            if alignment == "left" then
                label.TextXAlignment = Enum.TextXAlignment.Left
            elseif alignment == "right" then
                label.TextXAlignment = Enum.TextXAlignment.Right
            elseif alignment == "center" then
                label.TextXAlignment = Enum.TextXAlignment.Center
            end
            
            return labelFrame
        end
        
        -- Section separator
        function Tab:NewSection(text)
            text = text or "Section"
            
            local sectionFrame = Instance.new("Frame")
            sectionFrame.Name = "sectionFrame"
            sectionFrame.Parent = tabContent
            sectionFrame.BackgroundTransparency = 1
            sectionFrame.Size = UDim2.new(0.95, 0, 0, 25)
            
            local leftLine = Instance.new("Frame")
            leftLine.Name = "leftLine"
            leftLine.Parent = sectionFrame
            leftLine.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            leftLine.BorderSizePixel = 0
            leftLine.Position = UDim2.new(0, 0, 0.5, 0)
            leftLine.Size = UDim2.new(0.3, 0, 0, 1)
            
            local rightLine = Instance.new("Frame")
            rightLine.Name = "rightLine"
            rightLine.Parent = sectionFrame
            rightLine.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            rightLine.BorderSizePixel = 0
            rightLine.Position = UDim2.new(0.7, 0, 0.5, 0)
            rightLine.Size = UDim2.new(0.3, 0, 0, 1)
            
            local sectionLabel = Instance.new("TextLabel")
            sectionLabel.Name = "sectionLabel"
            sectionLabel.Parent = sectionFrame
            sectionLabel.BackgroundTransparency = 1
            sectionLabel.Position = UDim2.new(0.3, 5, 0, 0)
            sectionLabel.Size = UDim2.new(0.4, -10, 1, 0)
            sectionLabel.Font = Enum.Font.Code
            sectionLabel.Text = text
            sectionLabel.TextColor3 = Color3.fromRGB(159, 115, 255)
            sectionLabel.TextSize = 14
            
            return sectionFrame
        end
        
        -- Simple separator line
        function Tab:NewSeperator()
            local separatorFrame = Instance.new("Frame")
            separatorFrame.Name = "separatorFrame"
            separatorFrame.Parent = tabContent
            separatorFrame.BackgroundTransparency = 1
            separatorFrame.Size = UDim2.new(0.95, 0, 0, 10)
            
            local line = Instance.new("Frame")
            line.Name = "line"
            line.Parent = separatorFrame
            line.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            line.BorderSizePixel = 0
            line.Position = UDim2.new(0, 0, 0.5, 0)
            line.Size = UDim2.new(1, 0, 0, 1)
            
            return separatorFrame
        end
        
        -- Button
        function Tab:NewButton(text, callback)
            text = text or "Button"
            callback = callback or function() end
            
            local buttonRow = Instance.new("Frame")
            buttonRow.Name = "buttonRow"
            buttonRow.Parent = tabContent
            buttonRow.BackgroundTransparency = 1
            buttonRow.Size = UDim2.new(0.95, 0, 0, 30)
            
            local buttonRowLayout = Instance.new("UIListLayout")
            buttonRowLayout.Parent = buttonRow
            buttonRowLayout.FillDirection = Enum.FillDirection.Horizontal
            buttonRowLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
            buttonRowLayout.SortOrder = Enum.SortOrder.LayoutOrder
            buttonRowLayout.Padding = UDim.new(0, 5)
            
            local button = Instance.new("TextButton")
            button.Name = "button"
            button.Parent = buttonRow
            button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            button.BorderSizePixel = 0
            button.Size = UDim2.new(1, 0, 1, 0)
            button.Font = Enum.Font.Code
            button.Text = text
            button.TextColor3 = Color3.fromRGB(200, 200, 200)
            button.TextSize = 14
            button.AutoButtonColor = false
            
            local buttonCorner = Instance.new("UICorner")
            buttonCorner.CornerRadius = UDim.new(0, 4)
            buttonCorner.Parent = button
            
            local maxButtons = 4
            local buttonCount = 1
            
            -- Button hover effect
            button.MouseEnter:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}):Play()
            end)
            
            button.MouseLeave:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(45, 45, 45)}):Play()
            end)
            
            -- Button click effect
            button.MouseButton1Down:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(75, 75, 75)}):Play()
            end)
            
            button.MouseButton1Up:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}):Play()
                pcall(callback) -- Call the callback function safely
            end)
            
            local ButtonFunctions = {}
            
            -- Ability to add more buttons to the same row
            function ButtonFunctions:AddButton(text, callback)
                if buttonCount >= maxButtons then
                    warn("Maximum of " .. maxButtons .. " buttons per row")
                    return ButtonFunctions
                end
                
                buttonCount = buttonCount + 1
                
                -- Resize all buttons in the row
                for _, child in pairs(buttonRow:GetChildren()) do
                    if child:IsA("TextButton") then
                        child.Size = UDim2.new(1/buttonCount, 0, 1, 0)
                    end
                end
                
                local newButton = Instance.new("TextButton")
                newButton.Name = "button" .. buttonCount
                newButton.Parent = buttonRow
                newButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                newButton.BorderSizePixel = 0
                newButton.Size = UDim2.new(1/buttonCount, 0, 1, 0)
                newButton.Font = Enum.Font.Code
                newButton.Text = text
                newButton.TextColor3 = Color3.fromRGB(200, 200, 200)
                newButton.TextSize = 14
                newButton.AutoButtonColor = false
                
                local newButtonCorner = Instance.new("UICorner")
                newButtonCorner.CornerRadius = UDim.new(0, 4)
                newButtonCorner.Parent = newButton
                
                -- Button hover effect
                newButton.MouseEnter:Connect(function()
                    TweenService:Create(newButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}):Play()
                end)
                
                newButton.MouseLeave:Connect(function()
                    TweenService:Create(newButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(45, 45, 45)}):Play()
                end)
                
                -- Button click effect
                newButton.MouseButton1Down:Connect(function()
                    TweenService:Create(newButton, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(75, 75, 75)}):Play()
                end)
                
                newButton.MouseButton1Up:Connect(function()
                    TweenService:Create(newButton, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}):Play()
                    pcall(callback) -- Call the callback function safely
                end)
                
                return ButtonFunctions
            end
            
            -- Function to change button text
            function ButtonFunctions:Text(newText)
                button.Text = newText
                return ButtonFunctions
            end
            
            return ButtonFunctions
        end
        
        -- Toggle
        function Tab:NewToggle(text, defaultState, callback)
            text = text or "Toggle"
            defaultState = defaultState or false
            callback = callback or function() end
            
            local state = defaultState
            
            local toggleFrame = Instance.new("Frame")
            toggleFrame.Name = "toggleFrame"
            toggleFrame.Parent = tabContent
            toggleFrame.BackgroundTransparency = 1
            toggleFrame.Size = UDim2.new(0.95, 0, 0, 30)
            
            local toggleButton = Instance.new("TextButton")
            toggleButton.Name = "toggleButton"
            toggleButton.Parent = toggleFrame
            toggleButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            toggleButton.BorderSizePixel = 0
            toggleButton.Size = UDim2.new(1, 0, 1, 0)
            toggleButton.Font = Enum.Font.Code
            toggleButton.Text = text
            toggleButton.TextColor3 = Color3.fromRGB(200, 200, 200)
            toggleButton.TextSize = 14
            toggleButton.TextXAlignment = Enum.TextXAlignment.Left
            toggleButton.AutoButtonColor = false
            
            local togglePadding = Instance.new("UIPadding")
            togglePadding.Parent = toggleButton
            togglePadding.PaddingLeft = UDim.new(0, 10)
            
            local toggleCorner = Instance.new("UICorner")
            toggleCorner.CornerRadius = UDim.new(0, 4)
            toggleCorner.Parent = toggleButton
            
            local toggleIndicator = Instance.new("Frame")
            toggleIndicator.Name = "toggleIndicator"
            toggleIndicator.Parent = toggleButton
            toggleIndicator.AnchorPoint = Vector2.new(1, 0.5)
            toggleIndicator.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            toggleIndicator.Position = UDim2.new(1, -10, 0.5, 0)
            toggleIndicator.Size = UDim2.new(0, 40, 0, 20)
            
            local toggleIndicatorCorner = Instance.new("UICorner")
            toggleIndicatorCorner.CornerRadius = UDim.new(1, 0)
            toggleIndicatorCorner.Parent = toggleIndicator
            
            local toggleSwitch = Instance.new("Frame")
            toggleSwitch.Name = "toggleSwitch"
            toggleSwitch.Parent = toggleIndicator
            toggleSwitch.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
            toggleSwitch.Position = UDim2.new(0, 2, 0.5, -8)
            toggleSwitch.Size = UDim2.new(0, 16, 0, 16)
            
            local toggleSwitchCorner = Instance.new("UICorner")
            toggleSwitchCorner.CornerRadius = UDim.new(1, 0)
            toggleSwitchCorner.Parent = toggleSwitch
            
            -- Toggle hover effect
            toggleButton.MouseEnter:Connect(function()
                TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}):Play()
            end)
            
            toggleButton.MouseLeave:Connect(function()
                TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(45, 45, 45)}):Play()
            end)
            
            -- Function to update toggle state
            local function updateToggle()
                if state then
                    TweenService:Create(toggleSwitch, TweenInfo.new(0.2), {
                        Position = UDim2.new(0, 22, 0.5, -8),
                        BackgroundColor3 = Color3.fromRGB(159, 115, 255)
                    }):Play()
                    TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(70, 70, 70)
                    }):Play()
                else
                    TweenService:Create(toggleSwitch, TweenInfo.new(0.2), {
                        Position = UDim2.new(0, 2, 0.5, -8),
                        BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                    }):Play()
                    TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {
                        BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                    }):Play()
                end
                pcall(callback, state)
            end
            
            -- Toggle click handler
            toggleButton.MouseButton1Click:Connect(function()
                state = not state
                updateToggle()
            end)
            
            -- Set initial state
            if defaultState then
                updateToggle()
            end
            
            local ToggleFunctions = {}
            
            -- Function to set toggle state
            function ToggleFunctions:Set(newState)
                state = newState
                updateToggle()
                return ToggleFunctions
            end
            
            -- Function to get toggle state
            function ToggleFunctions:Get()
                return state
            end
            
            -- Function to add keybind
            function ToggleFunctions:AddKeybind(key)
                key = key or Enum.KeyCode.F
                
                local keyIndicator = Instance.new("TextLabel")
                keyIndicator.Name = "keyIndicator"
                keyIndicator.Parent = toggleButton
                keyIndicator.AnchorPoint = Vector2.new(1, 0.5)
                keyIndicator.BackgroundTransparency = 1
                keyIndicator.Position = UDim2.new(1, -60, 0.5, 0)
                keyIndicator.Size = UDim2.new(0, 30, 0, 20)
                keyIndicator.Font = Enum.Font.Code
                keyIndicator.Text = "[ " .. key.Name .. " ]"
                keyIndicator.TextColor3 = Color3.fromRGB(159, 115, 255)
                keyIndicator.TextSize = 12
                
                UserInputService.InputBegan:Connect(function(input, gameProcessed)
                    if not gameProcessed and input.KeyCode == key then
                        state = not state
                        updateToggle()
                    end
                end)
                
                return ToggleFunctions
            end
            
            return ToggleFunctions
        end
        
        -- Keybind
        function Tab:NewKeybind(text, defaultKey, callback)
            text = text or "Keybind"
            defaultKey = defaultKey or Enum.KeyCode.F
            callback = callback or function() end
            
            local keybindFrame = Instance.new("Frame")
            keybindFrame.Name = "keybindFrame"
            keybindFrame.Parent = tabContent
            keybindFrame.BackgroundTransparency = 1
            keybindFrame.Size = UDim2.new(0.95, 0, 0, 30)
            
            local keybindButton = Instance.new("TextButton")
            keybindButton.Name = "keybindButton"
            keybindButton.Parent = keybindFrame
            keybindButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            keybindButton.BorderSizePixel = 0
            keybindButton.Size = UDim2.new(1, 0, 1, 0)
            keybindButton.Font = Enum.Font.
--[[
  UI lib made by (SupremeCreativity) sc.owner

  - Please do not use this without permission, I am working really hard on this UI to make it perfect and do not have a big
    problem with other people using it, please just make sure you message me and ask me before using.
]]

-- / Locals
local Workspace = game:GetService("Workspace")
local Player = game:GetService("Players").LocalPlayer
local Mouse = Player:GetMouse()

-- / Services
local UserInputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local CoreGuiService = game:GetService("CoreGui")
local ContentService = game:GetService("ContentProvider")
local TeleportService = game:GetService("TeleportService")

-- / Tween table & function
local TweenTable = {
    Default = {
        TweenInfo.new(0.17, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, 0, false, 0)
    }
}
local CreateTween = function(name, speed, style, direction, loop, reverse, delay)
    name = name
    speed = speed or 0.17
    style = style or Enum.EasingStyle.Sine
    direction = direction or Enum.EasingDirection.InOut
    loop = loop or 0
    reverse = reverse or false
    delay = delay or 0

    TweenTable[name] = TweenInfo.new(speed, style, direction, loop, reverse, delay)
end

-- / Dragging
local drag = function(obj, latency)
    obj = obj
    latency = latency or 0.06

    local toggled = nil
    local input = nil
    local start = nil
    local startPos = nil

    local function updateInput(input)
        local Delta = input.Position - start
        local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
        TweenService:Create(obj, TweenInfo.new(latency), {Position = Position}):Play()
    end

    obj.InputBegan:Connect(function(inp)
        if (inp.UserInputType == Enum.UserInputType.MouseButton1) then
            toggled = true
            start = inp.Position
            startPos = obj.Position
            inp.Changed:Connect(function()
                if (inp.UserInputState == Enum.UserInputState.End) then
                    toggled = false
                end
            end)
        end
    end)

    obj.InputChanged:Connect(function(inp)
        if (inp.UserInputType == Enum.UserInputType.MouseMovement) then
            input = inp
        end
    end)

    UserInputService.InputChanged:Connect(function(inp)
        if (inp == input and toggled) then
            updateInput(inp)
        end
    end)
end

local library = {
    version = "2.0.2",
    title = "SC " .. tostring(math.random(1,366)),
    fps = 0,
    rank = "private"
}

-- The correct key for the library
local CorrectKey = "hh.hg**@@"
local KeyEntered = false

coroutine.wrap(function()
    RunService.RenderStepped:Connect(function(v)
        library.fps = math.floor(1/v + 0.5) -- Using math.floor with rounding instead of math.round
    end)
end)()

function library:RoundNumber(int, float)
    return tonumber(string.format("%." .. (int or 0) .. "f", float))
end

function library:GetUsername()
    return Player.Name
end

function library:CheckIfLoaded()
    if game:IsLoaded() then
        return true
    else
        return false
    end
end

function library:GetUserId()
    return Player.UserId
end

function library:GetPlaceId()
    return game.PlaceId
end

function library:GetJobId()
    return game.JobId
end

function library:Rejoin()
    TeleportService:TeleportToPlaceInstance(library:GetPlaceId(), library:GetJobId(), library:GetUserId())
end

function library:Copy(input) -- only works with synapse
    if syn then
        syn.write_clipboard(input)
    else
        warn("Synapse is not available. Copy function will not work.")
    end
end

function library:GetDay(type)
    if type == "word" then -- day in a full word
        return os.date("%A")
    elseif type == "short" then -- day in a shortened word
        return os.date("%a")
    elseif type == "month" then -- day of the month in digits
        return os.date("%d")
    elseif type == "year" then -- day of the year in digits
        return os.date("%j")
    end
end

function library:GetTime(type)
    if type == "24h" then -- time using a 24 hour clock
        return os.date("%H")
    elseif type == "12h" then -- time using a 12 hour clock
        return os.date("%I")
    elseif type == "minute" then -- time in minutes
        return os.date("%M")
    elseif type == "half" then -- what part of the day it is (AM or PM)
        return os.date("%p")
    elseif type == "second" then -- time in seconds
        return os.date("%S")
    elseif type == "full" then -- full time
        return os.date("%X")
    elseif type == "ISO" then -- ISO / UTC ( 1min = 1, 1hour = 100)
        return os.date("%z")
    elseif type == "zone" then -- time zone
        return os.date("%Z")
    end
end

function library:GetMonth(type)
    if type == "word" then -- full month name
        return os.date("%B")
    elseif type == "short" then -- month in shortened word
        return os.date("%b")
    elseif type == "digit" then -- the months digit
        return os.date("%m")
    end
end

function library:GetWeek(type)
    if type == "year_S" then -- the number of the week in the current year (sunday first day)
        return os.date("%U")
    elseif type == "day" then -- the week day
        return os.date("%w")
    elseif type == "year_M" then -- the number of the week in the current year (monday first day)
        return os.date("%W")
    end
end

function library:GetYear(type)
    if type == "digits" then -- the second 2 digits of the year
        return os.date("%y")
    elseif type == "full" then -- the full year
        return os.date("%Y")
    end
end

function library:UnlockFps(new) -- syn only
    if syn then
        setfpscap(new)
    end
end

function library:Watermark(text)
    -- Add small delay before interacting with Player.PlayerGui
    task.wait()
    
    -- Clear any existing watermarks
    for _, v in pairs(Player.PlayerGui:GetChildren()) do
        if v.Name == "SCUI_Watermark" then
            v:Destroy()
        end
    end

    text = text or "SC v2"

    local watermark = Instance.new("ScreenGui")
    watermark.Name = "SCUI_Watermark"
    watermark.Parent = Player.PlayerGui
    watermark.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local watermarkLayout = Instance.new("UIListLayout")
    watermarkLayout.Name = "watermarkLayout"
    watermarkLayout.Parent = watermark
    watermarkLayout.FillDirection = Enum.FillDirection.Horizontal
    watermarkLayout.SortOrder = Enum.SortOrder.LayoutOrder
    watermarkLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
    watermarkLayout.Padding = UDim.new(0, 4)

    local watermarkPadding = Instance.new("UIPadding")
    watermarkPadding.Name = "watermarkPadding"
    watermarkPadding.Parent = watermark
    watermarkPadding.PaddingBottom = UDim.new(0, 6)
    watermarkPadding.PaddingLeft = UDim.new(0, 6)

    -- Function to create watermark element (for reusability)
    local function createWatermarkElement(text)
        local edge = Instance.new("Frame")
        edge.Name = "edge"
        edge.AnchorPoint = Vector2.new(0.5, 0.5)
        edge.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        edge.Position = UDim2.new(0.5, 0, -0.03, 0)
        edge.Size = UDim2.new(0, 0, 0, 26)
        edge.BackgroundTransparency = 1

        local edgeCorner = Instance.new("UICorner")
        edgeCorner.CornerRadius = UDim.new(0, 2)
        edgeCorner.Name = "edgeCorner"
        edgeCorner.Parent = edge

        local background = Instance.new("Frame")
        background.Name = "background"
        background.Parent = edge
        background.AnchorPoint = Vector2.new(0.5, 0.5)
        background.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        background.BackgroundTransparency = 1
        background.ClipsDescendants = true
        background.Position = UDim2.new(0.5, 0, 0.5, 0)
        background.Size = UDim2.new(0, 0, 0, 24)

        local barFolder = Instance.new("Folder")
        barFolder.Name = "barFolder"
        barFolder.Parent = background

        local bar = Instance.new("Frame")
        bar.Name = "bar"
        bar.Parent = barFolder
        bar.BackgroundColor3 = Color3.fromRGB(159, 115, 255)
        bar.BackgroundTransparency = 0
        bar.Size = UDim2.new(0, 0, 0, 1)

        local barCorner = Instance.new("UICorner")
        barCorner.CornerRadius = UDim.new(0, 2)
        barCorner.Name = "barCorner"
        barCorner.Parent = bar

        local barLayout = Instance.new("UIListLayout")
        barLayout.Name = "barLayout"
        barLayout.Parent = barFolder
        barLayout.SortOrder = Enum.SortOrder.LayoutOrder

        local backgroundGradient = Instance.new("UIGradient")
        backgroundGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(34, 34, 34)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(28, 28, 28))}
        backgroundGradient.Rotation = 90
        backgroundGradient.Name = "backgroundGradient"
        backgroundGradient.Parent = background

        local backgroundCorner = Instance.new("UICorner")
        backgroundCorner.CornerRadius = UDim.new(0, 2)
        backgroundCorner.Name = "backgroundCorner"
        backgroundCorner.Parent = background

        local waterText = Instance.new("TextLabel")
        waterText.Name = "notifText"
        waterText.Parent = background
        waterText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        waterText.BackgroundTransparency = 1.000
        waterText.Position = UDim2.new(0, 0, -0.0416666679, 0)
        waterText.Size = UDim2.new(0, 0, 0, 24)
        waterText.Font = Enum.Font.Code
        waterText.Text = text
        waterText.TextColor3 = Color3.fromRGB(198, 198, 198)
        waterText.TextTransparency = 1
        waterText.TextSize = 14.000
        waterText.RichText = true

        local NewSize = TextService:GetTextSize(waterText.Text, waterText.TextSize, waterText.Font, Vector2.new(math.huge, math.huge))
        waterText.Size = UDim2.new(0, NewSize.X + 8, 0, 24)

        local waterPadding = Instance.new("UIPadding")
        waterPadding.Name = "waterPadding"
        waterPadding.Parent = waterText
        waterPadding.PaddingBottom = UDim.new(0, 4)
        waterPadding.PaddingLeft = UDim.new(0, 4)
        waterPadding.PaddingRight = UDim.new(0, 4)
        waterPadding.PaddingTop = UDim.new(0, 4)

        local backgroundLayout = Instance.new("UIListLayout")
        backgroundLayout.Name = "backgroundLayout"
        backgroundLayout.Parent = background
        backgroundLayout.SortOrder = Enum.SortOrder.LayoutOrder
        backgroundLayout.VerticalAlignment = Enum.VerticalAlignment.Center

        return edge, background, bar, waterText, NewSize
    end

    CreateTween("wm", 0.24)
    CreateTween("wm_2", 0.04)

    -- Create first watermark element
    local edge, background, bar, waterText, NewSize = createWatermarkElement(text)
    edge.Parent = watermark
    
    -- Animate the watermark appearance
    coroutine.wrap(function()
        TweenService:Create(edge, TweenTable["wm"], {BackgroundTransparency = 0}):Play()
        TweenService:Create(edge, TweenTable["wm"], {Size = UDim2.new(0, NewSize.X + 10, 0, 26)}):Play()
        TweenService:Create(background, TweenTable["wm"], {BackgroundTransparency = 0}):Play()
        TweenService:Create(background, TweenTable["wm"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
        wait(0.2)
        TweenService:Create(bar, TweenTable["wm"], {Size = UDim2.new(0, NewSize.X + 8, 0, 1)}):Play()
        wait(0.1)
        TweenService:Create(waterText, TweenTable["wm"], {TextTransparency = 0}):Play()
    end)()

    local WatermarkFunctions = {}
    
    function WatermarkFunctions:AddWatermark(text)
        text = text or "SC v2"

        local edge, background, bar, waterText, NewSize = createWatermarkElement(text)
        edge.Parent = watermark

        coroutine.wrap(function()
            TweenService:Create(edge, TweenTable["wm"], {BackgroundTransparency = 0}):Play()
            TweenService:Create(edge, TweenTable["wm"], {Size = UDim2.new(0, NewSize.X + 10, 0, 26)}):Play()
            TweenService:Create(background, TweenTable["wm"], {BackgroundTransparency = 0}):Play()
            TweenService:Create(background, TweenTable["wm"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
            wait(0.2)
            TweenService:Create(bar, TweenTable["wm"], {Size = UDim2.new(0, NewSize.X + 8, 0, 1)}):Play()
            wait(0.1)
            TweenService:Create(waterText, TweenTable["wm"], {TextTransparency = 0}):Play()
        end)()

        local NewWatermarkFunctions = {}
        
        function NewWatermarkFunctions:Hide()
            edge.Visible = false
            return NewWatermarkFunctions
        end
        
        function NewWatermarkFunctions:Show()
            edge.Visible = true
            return NewWatermarkFunctions
        end
        
        function NewWatermarkFunctions:Text(new)
            new = new or text
            waterText.Text = new

            local NewSize = TextService:GetTextSize(waterText.Text, waterText.TextSize, waterText.Font, Vector2.new(math.huge, math.huge))
            coroutine.wrap(function()
                TweenService:Create(edge, TweenTable["wm_2"], {Size = UDim2.new(0, NewSize.X + 10, 0, 26)}):Play()
                TweenService:Create(background, TweenTable["wm_2"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
                TweenService:Create(bar, TweenTable["wm_2"], {Size = UDim2.new(0, NewSize.X + 8, 0, 1)}):Play()
                TweenService:Create(waterText, TweenTable["wm_2"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
            end)()

            return NewWatermarkFunctions
        end
        
        return NewWatermarkFunctions
    end
    
    function WatermarkFunctions:Remove()
        watermark:Destroy()
        return WatermarkFunctions
    end
    
    return WatermarkFunctions
end

function library:InitNotifications()
    -- Add small delay before interacting with Player.PlayerGui
    task.wait()
    
    -- Clear any existing notification UIs
    for _, v in next, Player.PlayerGui:GetChildren() do
        if v.Name == "SCUI_Notifications" then
            v:Destroy()
        end
    end

    local Notifications = Instance.new("ScreenGui")
    local notificationsLayout = Instance.new("UIListLayout")
    local notificationsPadding = Instance.new("UIPadding")

    Notifications.Name = "SCUI_Notifications"
    Notifications.Parent = Player.PlayerGui
    Notifications.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    notificationsLayout.Name = "notificationsLayout"
    notificationsLayout.Parent = Notifications
    notificationsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    notificationsLayout.Padding = UDim.new(0, 4)

    notificationsPadding.Name = "notificationsPadding"
    notificationsPadding.Parent = Notifications
    notificationsPadding.PaddingLeft = UDim.new(0, 6)
    notificationsPadding.PaddingTop = UDim.new(0, 18)

    local Notification = {}
    
    function Notification:Notify(text, duration, type, callback)
        CreateTween("notification_load", 0.2)

        text = text or "please wait."
        duration = duration or 5
        type = type or "notification"
        callback = callback or function() end

        local edge = Instance.new("Frame")
        local edgeCorner = Instance.new("UICorner")
        local background = Instance.new("Frame")
        local barFolder = Instance.new("Folder")
        local bar = Instance.new("Frame")
        local barCorner = Instance.new("UICorner")
        local barLayout = Instance.new("UIListLayout")
        local backgroundGradient = Instance.new("UIGradient")
        local backgroundCorner = Instance.new("UICorner")
        local notifText = Instance.new("TextLabel")
        local notifPadding = Instance.new("UIPadding")
        local backgroundLayout = Instance.new("UIListLayout")

        edge.Name = "edge"
        edge.Parent = Notifications
        edge.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        edge.BackgroundTransparency = 1.000
        edge.Size = UDim2.new(0, 0, 0, 26)

        edgeCorner.CornerRadius = UDim.new(0, 2)
        edgeCorner.Name = "edgeCorner"
        edgeCorner.Parent = edge

        background.Name = "background"
        background.Parent = edge
        background.AnchorPoint = Vector2.new(0.5, 0.5)
        background.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        background.BackgroundTransparency = 1.000
        background.ClipsDescendants = true
        background.Position = UDim2.new(0.5, 0, 0.5, 0)
        background.Size = UDim2.new(0, 0, 0, 24)

        barFolder.Name = "barFolder"
        barFolder.Parent = background

        bar.Name = "bar"
        bar.Parent = barFolder
        bar.BackgroundColor3 = Color3.fromRGB(159, 115, 255)
        bar.BackgroundTransparency = 0.200
        bar.Size = UDim2.new(0, 0, 0, 1)
        
        -- Set color based on notification type
        if type == "notification" then
            bar.BackgroundColor3 = Color3.fromRGB(159, 115, 255)
        elseif type == "alert" then
            bar.BackgroundColor3 = Color3.fromRGB(255, 246, 112)
        elseif type == "error" then
            bar.BackgroundColor3 = Color3.fromRGB(255, 74, 77)
        elseif type == "success" then
            bar.BackgroundColor3 = Color3.fromRGB(131, 255, 103)
        elseif type == "information" then
            bar.BackgroundColor3 = Color3.fromRGB(126, 117, 255)
        end

        barCorner.CornerRadius = UDim.new(0, 2)
        barCorner.Name = "barCorner"
        barCorner.Parent = bar

        barLayout.Name = "barLayout"
        barLayout.Parent = barFolder
        barLayout.SortOrder = Enum.SortOrder.LayoutOrder

        backgroundGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(34, 34, 34)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(28, 28, 28))}
        backgroundGradient.Rotation = 90
        backgroundGradient.Name = "backgroundGradient"
        backgroundGradient.Parent = background

        backgroundCorner.CornerRadius = UDim.new(0, 2)
        backgroundCorner.Name = "backgroundCorner"
        backgroundCorner.Parent = background

        notifText.Name = "notifText"
        notifText.Parent = background
        notifText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        notifText.BackgroundTransparency = 1.000
        notifText.Size = UDim2.new(0, 230, 0, 26)
        notifText.Font = Enum.Font.Code
        notifText.Text = text
        notifText.TextColor3 = Color3.fromRGB(198, 198, 198)
        notifText.TextSize = 14.000
        notifText.TextTransparency = 1.000
        notifText.TextXAlignment = Enum.TextXAlignment.Left
        notifText.RichText = true

        notifPadding.Name = "notifPadding"
        notifPadding.Parent = notifText
        notifPadding.PaddingBottom = UDim.new(0, 4)
        notifPadding.PaddingLeft = UDim.new(0, 4)
        notifPadding.PaddingRight = UDim.new(0, 4)
        notifPadding.PaddingTop = UDim.new(0, 4)

        backgroundLayout.Name = "backgroundLayout"
        backgroundLayout.Parent = background
        backgroundLayout.SortOrder = Enum.SortOrder.LayoutOrder
        backgroundLayout.VerticalAlignment = Enum.VerticalAlignment.Center

        local NewSize = TextService:GetTextSize(notifText.Text, notifText.TextSize, notifText.Font, Vector2.new(math.huge, math.huge))
        CreateTween("notification_wait", duration, Enum.EasingStyle.Quad)
        
        local IsRunning = false
        coroutine.wrap(function()
            IsRunning = true
            TweenService:Create(edge, TweenTable["notification_load"], {BackgroundTransparency = 0}):Play()
            TweenService:Create(background, TweenTable["notification_load"], {BackgroundTransparency = 0}):Play()
            TweenService:Create(notifText, TweenTable["notification_load"], {TextTransparency = 0}):Play()
            TweenService:Create(edge, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 10, 0, 26)}):Play()
            TweenService:Create(background, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
            TweenService:Create(notifText, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
            wait()
            TweenService:Create(bar, TweenTable["notification_wait"], {Size = UDim2.new(0, NewSize.X + 8, 0, 1)}):Play()
            repeat wait() until bar.Size == UDim2.new(0, NewSize.X + 8, 0, 1)
            IsRunning = false
            TweenService:Create(edge, TweenTable["notification_load"], {BackgroundTransparency = 1}):Play()
            TweenService:Create(background, TweenTable["notification_load"], {BackgroundTransparency = 1}):Play()
            TweenService:Create(notifText, TweenTable["notification_load"], {TextTransparency = 1}):Play()
            TweenService:Create(bar, TweenTable["notification_load"], {BackgroundTransparency = 1}):Play()
            TweenService:Create(edge, TweenTable["notification_load"], {Size = UDim2.new(0, 0, 0, 26)}):Play()
            TweenService:Create(background, TweenTable["notification_load"], {Size = UDim2.new(0, 0, 0, 24)}):Play()
            TweenService:Create(notifText, TweenTable["notification_load"], {Size = UDim2.new(0, 0, 0, 24)}):Play()
            TweenService:Create(bar, TweenTable["notification_load"], {Size = UDim2.new(0, 0, 0, 1)}):Play()
            wait(0.2)
            edge:Destroy()
            
            if callback then
                callback()
            end
        end)()

        CreateTween("notification_reset", 0.4)
        
        local NotificationFunctions = {}
        
        function NotificationFunctions:Text(new)
            new = new or text
            notifText.Text = new

            NewSize = TextService:GetTextSize(notifText.Text, notifText.TextSize, notifText.Font, Vector2.new(math.huge, math.huge))
            if IsRunning then
                TweenService:Create(edge, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 10, 0, 26)}):Play()
                TweenService:Create(background, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
                TweenService:Create(notifText, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 8, 0, 24)}):Play()
                wait()
                TweenService:Create(bar, TweenTable["notification_reset"], {Size = UDim2.new(0, 0, 0, 1)}):Play()
                wait(0.4)
                TweenService:Create(bar, TweenTable["notification_wait"], {Size = UDim2.new(0, NewSize.X + 8, 0, 1)}):Play()
            end

            return NotificationFunctions
        end
        
        return NotificationFunctions
    end
    
    return Notification
end

-- Function to create key prompt UI
function library:KeyPrompt()
    -- Clear existing UI
    for _, v in pairs(Player.PlayerGui:GetChildren()) do
        if v.Name == "SCUI_KeyPromptScreen" then
            v:Destroy()
        end
    end
    
    local keyPrompt = Instance.new("ScreenGui")
    keyPrompt.Name = "SCUI_KeyPromptScreen"
    keyPrompt.Parent = Player.PlayerGui
    
    local main = Instance.new("Frame")
    main.Name = "main"
    main.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
    main.BorderSizePixel = 0
    main.Position = UDim2.new(0.5, -150, 0.5, -75)
    main.Size = UDim2.new(0, 300, 0, 150)
    main.Parent = keyPrompt
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5)
    corner.Parent = main
    
    local title = Instance.new("TextLabel")
    title.BackgroundTransparency = 1
    title.Position = UDim2.new(0, 0, 0, 10)
    title.Size = UDim2.new(1, 0, 0, 25)
    title.Font = Enum.Font.Code
    title.Text = "SC UI Library - Key System"
    title.TextColor3 = Color3.fromRGB(159, 115, 255)
    title.TextSize = 18
    title.Parent = main
    
    local textBox = Instance.new("TextBox")
    textBox.BackgroundColor3 = Color3
