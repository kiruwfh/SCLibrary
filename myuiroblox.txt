--[[
    MyNewUI Library v1.1.1
    - Перенесено объявление 'player' в начало для возможного исправления ошибки парсинга в некоторых средах.
]]

-- / Services
local UserInputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

-- / Locals
local player = Players.LocalPlayer -- << ПЕРЕМЕЩЕНО СЮДА

-- / Core Library Table
local MyUILibrary = {}
MyUILibrary.Version = "1.1.1"
MyUILibrary._IsKeyAccepted = false

-- / Private Helper Functions
local function CreateElement(elementType, properties)
    local element = Instance.new(elementType)
    for prop, value in pairs(properties or {}) do
        pcall(function() element[prop] = value end)
    end
    return element
end

local function EnableDrag(guiObject)
    local dragging = false
    local dragInput = nil
    local dragStart = nil
    local startPos = nil
    local originalZIndex = guiObject.Parent and guiObject.Parent.DisplayOrder or 1

    guiObject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = guiObject.Position
            dragInput = input
            if guiObject.Parent and guiObject.Parent:IsA("ScreenGui") then
                 originalZIndex = guiObject.Parent.DisplayOrder
                 guiObject.Parent.DisplayOrder = 9999
            end
        end
    end)

    guiObject.InputEnded:Connect(function(input)
        if input == dragInput then
            dragging = false
            dragInput = nil
            if guiObject.Parent and guiObject.Parent:IsA("ScreenGui") then
                 guiObject.Parent.DisplayOrder = originalZIndex
            end
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            guiObject.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- / Window Object
local Window = {}
Window.__index = Window

function Window:NewTab(title)
    title = title or "Вкладка"

    local tabButton = CreateElement("TextButton", {
        Name = title .. "_TabButton", Parent = self._tabButtonContainer, Size = UDim2.new(1, -10, 0, 28),
        BackgroundColor3 = Color3.fromRGB(55, 55, 55), TextColor3 = Color3.fromRGB(170, 170, 170),
        Font = Enum.Font.GothamSemibold, TextSize = 15, Text = title, AutoButtonColor = false,
        LayoutOrder = #self._tabButtonContainer:GetChildren() + 1
    })
    CreateElement("UICorner", { CornerRadius = UDim.new(0, 3), Parent = tabButton })

    local page = CreateElement("ScrollingFrame", {
        Name = title .. "_Page", Parent = self._contentContainer, Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1.0, BorderSizePixel = 0, Visible = false, ScrollBarThickness = 5,
        ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100), CanvasSize = UDim2.new(0, 0, 0, 0)
    })
    local pageLayout = CreateElement("UIListLayout", { Name = "PageLayout", Parent = page, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 6), HorizontalAlignment = Enum.HorizontalAlignment.Center })
    local pagePadding = CreateElement("UIPadding", { Parent = page, PaddingLeft = UDim.new(0, 8), PaddingRight = UDim.new(0, 8), PaddingTop = UDim.new(0, 8), PaddingBottom = UDim.new(0, 8) })

    tabButton.MouseButton1Click:Connect(function()
        if self._activeTabButton == tabButton then return end
        if self._activeTabButton then
            TweenService:Create(self._activeTabButton, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}):Play()
            TweenService:Create(self._activeTabButton, TweenInfo.new(0.15), {TextColor3 = Color3.fromRGB(170, 170, 170)}):Play()
        end
        if self._activePage then self._activePage.Visible = false end
        TweenService:Create(tabButton, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(85, 85, 85)}):Play()
        TweenService:Create(tabButton, TweenInfo.new(0.15), {TextColor3 = Color3.fromRGB(230, 230, 230)}):Play()
        page.Visible = true
        self._activeTabButton = tabButton
        self._activePage = page
    end)

    if not self._activeTabButton then
         task.wait(0.1)
         pcall(function() tabButton:MouseButton1Click() end)
    end

    local Tab = {}
    Tab.Page = page
    Tab._pageLayout = pageLayout
    Tab._pagePadding = pagePadding

    function Tab:_UpdateCanvasSize()
        if self._debounceUpdate then return end
        self._debounceUpdate = true
        task.wait()
        if self.Page and self._pageLayout then
             local topPad = self._pagePadding and self._pagePadding.PaddingTop.Offset or 0
             local bottomPad = self._pagePadding and self._pagePadding.PaddingBottom.Offset or 0
             self.Page.CanvasSize = UDim2.new(0, 0, 0, self._pageLayout.AbsoluteContentSize.Y + topPad + bottomPad)
        end
        self._debounceUpdate = false
    end

    self.Page.ChildAdded:Connect(function() Tab:_UpdateCanvasSize() end)
    self.Page.ChildRemoved:Connect(function() Tab:_UpdateCanvasSize() end)
    self._pageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function() Tab:_UpdateCanvasSize() end)

    function Tab:NewLabel(text, alignment)
        local label = CreateElement("TextLabel", { Name = "Label", Parent = self.Page, Text = text or "Label", Font = Enum.Font.Code, TextSize = 14, TextColor3 = Color3.fromRGB(210, 210, 210), BackgroundTransparency = 1, Size = UDim2.new(1, 0, 0, 18), TextWrapped = true, TextXAlignment = alignment or Enum.TextXAlignment.Left })
        self:_UpdateCanvasSize()
        return label
    end

    function Tab:NewButton(text, callback)
        callback = callback or function() print("Button '"..tostring(text).."' clicked") end
        local button = CreateElement("TextButton", { Name = "Button", Parent = self.Page, Text = text or "Button", Font = Enum.Font.GothamSemibold, TextSize = 14, TextColor3 = Color3.fromRGB(220, 220, 220), BackgroundColor3 = Color3.fromRGB(80, 80, 80), Size = UDim2.new(1, 0, 0, 28), AutoButtonColor = false })
        CreateElement("UICorner", { CornerRadius = UDim.new(0, 3), Parent = button })
        button.MouseEnter:Connect(function() TweenService:Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(100, 100, 100)}):Play() end)
        button.MouseLeave:Connect(function() TweenService:Create(button, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(80, 80, 80)}):Play() end)
        button.MouseButton1Click:Connect(function() pcall(callback) end)
        self:_UpdateCanvasSize()
        return button
    end

     function Tab:NewToggle(text, defaultState, callback)
        defaultState = defaultState or false
        callback = callback or function(state) print("Toggle '"..tostring(text).."' state:", state) end
        local currentState = defaultState
        local frame = CreateElement("Frame", {Name = "ToggleFrame", Parent = self.Page, Size = UDim2.new(1, 0, 0, 24), BackgroundTransparency = 1})
        local layout = CreateElement("UIListLayout", {Parent = frame, FillDirection = Enum.FillDirection.Horizontal, VerticalAlignment = Enum.VerticalAlignment.Center, Padding = UDim.new(0, 8)})
        local checkbox = CreateElement("TextButton", {Name = "Checkbox", Parent = frame, Size = UDim2.new(0, 18, 0, 18), BackgroundColor3 = Color3.fromRGB(60, 60, 60), BorderSizePixel = 0, Text = "", AutoButtonColor = false})
        CreateElement("UICorner", {CornerRadius = UDim.new(0, 3), Parent = checkbox})
        local checkmark = CreateElement("Frame", {Name = "Checkmark", Parent = checkbox, Size = UDim2.new(0.7, 0, 0.7, 0), AnchorPoint = Vector2.new(0.5, 0.5), Position = UDim2.fromScale(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(150, 100, 255), BorderSizePixel = 0, Visible = currentState})
        CreateElement("UICorner", {CornerRadius = UDim.new(0, 2), Parent = checkmark})
        local label = CreateElement("TextLabel", {Name = "ToggleLabel", Parent = frame, Text = text or "Toggle", Font = Enum.Font.Code, TextSize = 14, TextColor3 = Color3.fromRGB(210, 210, 210), BackgroundTransparency = 1, Size = UDim2.new(1, -30, 1, 0), TextXAlignment = Enum.TextXAlignment.Left})
        local function UpdateState(newState) currentState = newState; checkmark.Visible = currentState; pcall(callback, currentState) end
        checkbox.MouseButton1Click:Connect(function() UpdateState(not currentState) end)
        self:_UpdateCanvasSize()
        local control = {}; function control:Set(state) UpdateState(state) end; function control:Get() return currentState end; function control:Remove() frame:Destroy() Tab:_UpdateCanvasSize() end; return control
    end
    -- TODO: Add other components (Slider, Textbox, Selector, Keybind, Separator)

    return Tab
end

function Window:ToggleVisible()
    if self.ScreenGui then self.ScreenGui.Enabled = not self.ScreenGui.Enabled; print("[MyNewUI] Visibility toggled to:", self.ScreenGui.Enabled) end
end

function Window:SetTitle(title)
    if self._headerLabel then self._headerLabel.Text = title or "My UI Library" end
end

function Window:Remove()
    if self._toggleConnection then self._toggleConnection:Disconnect(); self._toggleConnection = nil end
    if self.ScreenGui then print("[MyNewUI] Removing UI."); self.ScreenGui:Destroy(); for k, v in pairs(self) do self[k] = nil end end
end

-- / Key System
function MyUILibrary:RequestKey(options)
    options = options or {}
    local correctKey = options.CorrectKey or "DEFAULT_KEY"
    local onSuccess = options.OnSuccess or function() print("[MyNewUI] Key Correct!") end
    local keyPromptName = "MyNewUI_KeyPrompt"
    local existingPrompt = CoreGui:FindFirstChild(keyPromptName)
    if existingPrompt then existingPrompt:Destroy() end

    local screenGui = CreateElement("ScreenGui", {Name = keyPromptName, Parent = CoreGui, DisplayOrder = 10000, ZIndexBehavior = Enum.ZIndexBehavior.Sibling})
    local overlay = CreateElement("Frame", {Name = "Overlay", Parent = screenGui, Size = UDim2.fromScale(1, 1), BackgroundColor3 = Color3.new(0, 0, 0), BackgroundTransparency = 0.6, Active = true})
    local promptBox = CreateElement("Frame", {Name = "PromptBox", Parent = overlay, Size = UDim2.new(0, 300, 0, 160), AnchorPoint = Vector2.new(0.5, 0.5), Position = UDim2.fromScale(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(40, 40, 45), BorderSizePixel = 0})
    CreateElement("UICorner", { CornerRadius = UDim.new(0, 4), Parent = promptBox })
    local title = CreateElement("TextLabel", {Name = "Title", Parent = promptBox, Size = UDim2.new(1, 0, 0, 35), BackgroundColor3 = Color3.fromRGB(55, 55, 60), Text = "Требуется Ключ", Font = Enum.Font.GothamSemibold, TextSize = 16, TextColor3 = Color3.fromRGB(220, 220, 225)})
    local infoLabel = CreateElement("TextLabel", {Name = "Info", Parent = promptBox, Size = UDim2.new(0.9, 0, 0, 20), Position = UDim2.new(0.5, 0, 0, 45), AnchorPoint = Vector2.new(0.5, 0), Text = "Введите ключ доступа:", Font = Enum.Font.Code, TextSize = 14, TextColor3 = Color3.fromRGB(180, 180, 180), BackgroundTransparency = 1})
    local keyInput = CreateElement("TextBox", {Name = "Input", Parent = promptBox, Size = UDim2.new(0.8, 0, 0, 30), Position = UDim2.new(0.5, 0, 0, 75), AnchorPoint = Vector2.new(0.5, 0), BackgroundColor3 = Color3.fromRGB(30, 30, 35), BorderSizePixel = 0, Font = Enum.Font.Code, TextSize = 14, TextColor3 = Color3.fromRGB(210, 210, 210), PlaceholderText = "Ключ...", PlaceholderColor3 = Color3.fromRGB(100, 100, 100), ClearTextOnFocus = false})
    CreateElement("UICorner", { CornerRadius = UDim.new(0, 3), Parent = keyInput })
    local submitButton = CreateElement("TextButton", {Name = "Submit", Parent = promptBox, Size = UDim2.new(0.5, 0, 0, 30), Position = UDim2.new(0.5, 0, 0, 115), AnchorPoint = Vector2.new(0.5, 0), BackgroundColor3 = Color3.fromRGB(80, 80, 90), Font = Enum.Font.GothamSemibold, Text = "Ввод", TextSize = 14, TextColor3 = Color3.fromRGB(220, 220, 220), AutoButtonColor = false})
    CreateElement("UICorner", { CornerRadius = UDim.new(0, 3), Parent = submitButton })

    submitButton.MouseEnter:Connect(function() submitButton.BackgroundColor3 = Color3.fromRGB(100, 100, 110) end)
    submitButton.MouseLeave:Connect(function() submitButton.BackgroundColor3 = Color3.fromRGB(80, 80, 90) end)

    local function checkKey()
        if keyInput.Text == correctKey then
            MyUILibrary._IsKeyAccepted = true
            screenGui:Destroy()
            pcall(onSuccess)
        else
            infoLabel.Text = "Неверный ключ!"
            infoLabel.TextColor3 = Color3.fromRGB(255, 80, 80)
            keyInput.Text = ""
            local originalPos = promptBox.Position
            local tween = TweenService:Create(promptBox, TweenInfo.new(0.08, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 4, true), {Position = originalPos + UDim2.new(0, 5, 0, 0)})
            tween:Play()
            tween.Completed:Connect(function() promptBox.Position = originalPos end)
        end
    end

    submitButton.MouseButton1Click:Connect(checkKey)
    keyInput.FocusLost:Connect(function(enterPressed) if enterPressed then checkKey() end end)
    print("[MyNewUI] Key prompt displayed.")
end

-- / Greeting Screen
function MyUILibrary:ShowGreeting(options, callback)
    options = options or {}
    callback = callback or function() print("[MyNewUI] Greeting finished.") end
    local duration = options.Duration or 2.5
    local greetingName = "MyNewUI_Greeting"
    -- player variable is now an upvalue (defined at the top)

    local existingGreeting = CoreGui:FindFirstChild(greetingName)
    if existingGreeting then existingGreeting:Destroy() end

    local screenGui = CreateElement("ScreenGui", {Name = greetingName, Parent = CoreGui, DisplayOrder = 10001, ZIndexBehavior = Enum.ZIndexBehavior.Sibling})
    local overlay = CreateElement("Frame", {Name = "Overlay", Parent = screenGui, Size = UDim2.fromScale(1, 1), BackgroundColor3 = Color3.new(0, 0, 0), BackgroundTransparency = 1})
    local textLabel = CreateElement("TextLabel", {Name = "WelcomeText", Parent = overlay, Size = UDim2.new(1, -40, 0, 50), Position = UDim2.fromScale(0.5, 0.5), AnchorPoint = Vector2.new(0.5, 0.5), Text = "Добро пожаловать, " .. (player and player.DisplayName or "Игрок") .. "!", Font = Enum.Font.GothamBold, TextSize = 24, TextColor3 = Color3.fromRGB(230, 230, 230), TextWrapped = true, BackgroundTransparency = 1, TextTransparency = 1})
    local loadBarBg = CreateElement("Frame", {Name = "LoadBarBg", Parent = overlay, Size = UDim2.new(0.5, 0, 0, 6), Position = UDim2.new(0.5, 0, 0.6, 0), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(60, 60, 65), BackgroundTransparency = 1, BorderSizePixel = 0})
    CreateElement("UICorner", {CornerRadius = UDim.new(1,0), Parent = loadBarBg})
    local loadBarFill = CreateElement("Frame", {Name = "LoadBarFill", Parent = loadBarBg, Size = UDim2.fromScale(0, 1), BackgroundColor3 = Color3.fromRGB(150, 100, 255), BorderSizePixel = 0})
    CreateElement("UICorner", {CornerRadius = UDim.new(1,0), Parent = loadBarFill})

    local fadeInTime = 0.4
    local waitTime = math.max(0, duration - (fadeInTime * 2)) -- Ensure waitTime is not negative
    local loadTime = math.max(0.1, waitTime * 0.8) -- Ensure loadTime is slightly positive

    TweenService:Create(overlay, TweenInfo.new(fadeInTime), {BackgroundTransparency = 0.6}):Play()
    local textTween = TweenService:Create(textLabel, TweenInfo.new(fadeInTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, fadeInTime * 0.5), {TextTransparency = 0})
    textTween:Play()
    TweenService:Create(loadBarBg, TweenInfo.new(fadeInTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, fadeInTime * 0.6), {BackgroundTransparency = 0.5}):Play()
    local loadTween = TweenService:Create(loadBarFill, TweenInfo.new(loadTime, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, 0, false, fadeInTime * 0.8), {Size = UDim2.fromScale(1, 1)})
    loadTween:Play()

    task.delay(duration - fadeInTime, function()
        TweenService:Create(overlay, TweenInfo.new(fadeInTime), {BackgroundTransparency = 1}):Play()
        TweenService:Create(textLabel, TweenInfo.new(fadeInTime), {TextTransparency = 1}):Play()
        TweenService:Create(loadBarBg, TweenInfo.new(fadeInTime), {BackgroundTransparency = 1}):Play()
        task.delay(fadeInTime, function()
            if screenGui and screenGui.Parent then screenGui:Destroy() end -- Check if still exists
            pcall(callback)
        end)
    end)
    print("[MyNewUI] Greeting displayed.")
end

-- / Library Initialization Function (Main UI)
function MyUILibrary:Init(options)
    if not MyUILibrary._IsKeyAccepted then
         warn("[MyNewUI] Init called, but key was not accepted. Use RequestKey first.")
         return nil
    end

    options = options or {}
    local title = options.Title or "My UI Library"
    local toggleKey = options.ToggleKey or Enum.KeyCode.RightControl
    local initialSize = options.Size or UDim2.new(0, 550, 0, 350)
    local initialPosition = options.Position or UDim2.fromScale(0.5, 0.5)
    local uiName = "MyNewUI_Screen"

    print("[MyNewUI] Initializing Main UI...")

    local existingGui = CoreGui:FindFirstChild(uiName)
    if existingGui then warn("[MyNewUI] Main UI already exists. Destroying old one."); existingGui:Destroy() end

    local screenGui = CreateElement("ScreenGui", {Name = uiName, Parent = CoreGui, ZIndexBehavior = Enum.ZIndexBehavior.Sibling, DisplayOrder = 9990})
    local mainFrame = CreateElement("Frame", {Name = "MainFrame", Parent = screenGui, Size = initialSize, Position = initialPosition, AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(40, 40, 45), BorderSizePixel = 1, BorderColor3 = Color3.fromRGB(80, 80, 90)})
    CreateElement("UICorner", { CornerRadius = UDim.new(0, 5), Parent = mainFrame })
    EnableDrag(mainFrame)

    local header = CreateElement("Frame", {Name = "Header", Parent = mainFrame, Size = UDim2.new(1, 0, 0, 30), BackgroundColor3 = Color3.fromRGB(55, 55, 60), BorderSizePixel = 0})
    local headerLabel = CreateElement("TextLabel", {Name = "Title", Parent = header, Size = UDim2.new(1, -10, 1, 0), Position = UDim2.fromOffset(5, 0), Text = title, Font = Enum.Font.GothamSemibold, TextSize = 16, TextColor3 = Color3.fromRGB(220, 220, 225), BackgroundTransparency = 1, TextXAlignment = Enum.TextXAlignment.Left})
    local contentArea = CreateElement("Frame", {Name = "ContentArea", Parent = mainFrame, Size = UDim2.new(1, 0, 1, -30), Position = UDim2.fromOffset(0, 30), BackgroundTransparency = 1})
    local tabButtonContainer = CreateElement("ScrollingFrame", {Name = "TabButtonContainer", Parent = contentArea, Size = UDim2.new(0, 130, 1, -10), Position = UDim2.fromOffset(5, 5), BackgroundColor3 = Color3.fromRGB(45, 45, 50), BorderSizePixel = 0, CanvasSize = UDim2.new(0,0,0,0), ScrollBarThickness = 4})
    CreateElement("UICorner", { CornerRadius = UDim.new(0, 3), Parent = tabButtonContainer })
    CreateElement("UIListLayout", {Parent = tabButtonContainer, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 4), HorizontalAlignment = Enum.HorizontalAlignment.Center})
    CreateElement("UIPadding", { Parent = tabButtonContainer, Padding = UDim.new(0,5)})
    local contentContainer = CreateElement("Frame", {Name = "ContentContainer", Parent = contentArea, Size = UDim2.new(1, -140, 1, -10), Position = UDim2.fromOffset(135, 5), BackgroundColor3 = Color3.fromRGB(45, 45, 50), BorderSizePixel = 0, ClipsDescendants = true})
    CreateElement("UICorner", { CornerRadius = UDim.new(0, 3), Parent = contentContainer })

    local windowInstance = {}
    setmetatable(windowInstance, Window)
    windowInstance.ScreenGui = screenGui
    windowInstance.MainFrame = mainFrame
    windowInstance._headerLabel = headerLabel
    windowInstance._tabButtonContainer = tabButtonContainer
    windowInstance._contentContainer = contentContainer
    windowInstance._activeTabButton = nil
    windowInstance._activePage = nil
    windowInstance._toggleKey = toggleKey

    windowInstance._toggleConnection = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if not gameProcessedEvent and input.KeyCode == windowInstance._toggleKey then
            windowInstance:ToggleVisible()
        end
    end)

    print("[MyNewUI] Main UI Initialization complete.")
    return windowInstance
end

MyUILibrary._IsKeyAccepted = false -- Сбрасываем флаг при загрузке библиотеки

return MyUILibrary
